self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/language/typescript/2021-04-14-Typescript-시작하기.md":
/*!*************************************************************************!*\
  !*** ./contents/blog/language/typescript/2021-04-14-Typescript-시작하기.md ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"Typescript 시작하기\"\r\ndate: \"2021.04.14\"\r\ntags: \r\n  - typescript\r\n---\r\n\r\n\r\n\r\n# 타입스크립트 fundamentals - 타입, 함수, 인터페이스, enum, 클래스\r\n\r\n\r\n## 1. 기본타입\r\n\r\n변수선언방식 변수명 : 타입 = 값;\r\n\r\n```tsx\r\nlet str: string = 'hi'\r\nlet num: number = 10;\r\nlet isLoggedIn: boolean = false;\r\n```\r\n\r\n### Array\r\n\r\n요소의 집합\r\n\r\n```tsx\r\nlet arr: number[] = [1, 2, 3];\r\narr[2] = 100;\r\n\r\n// 타입이 다르므로 에러\r\narr[2] = 'hi';\r\n```\r\n\r\n### Tuple\r\n\r\n**길이가 고정**되고 요소 **타입이 지정**된 배열\r\n\r\n```tsx\r\nlet tuple: [string, number] = ['hi', 10];\r\n\r\n//길이가 고정되기때문에 에러뜸\r\ntuple[5] = 'hello';\r\n// number타입에 string 할당 x 에러\r\ntuple[1] = 'hi';\r\n\r\n```\r\n\r\n### Enum\r\n\r\n**상수**들의 집합이다.\r\n\r\n```tsx\r\nenum Avengers { Capt, IronMan, Thor }\r\nlet hero: Avengers = Avengers.Capt;\r\n\r\nconsole.log(hero); // 0\r\n\r\n//읽기전용이라서 할당불가 에러\r\nAvengers.Capt = 3;\r\n```\r\n\r\n### Any\r\n\r\n자바스크립트의 변수랑 똑같다. 뭐든 할당 가능\r\n\r\n```tsx\r\nlet str: any = 'hi';\r\nlet num: any = 10;\r\nlet arr: any = ['a', 2, true];\r\n\r\n//any라서 num에 'hi' 할당 가능\r\nnum = 'hi';\r\n```\r\n\r\n### Void\r\n\r\nundefined와 null만 할당가능하다. 일반적으로 반환하지 않는 **함수**에서 사용\r\n\r\n```tsx\r\nlet unuseful: void = undefined;\r\nfunction notuse(): void {\r\n  console.log('sth');\r\n}\r\n```\r\n\r\n### never\r\n\r\n에러를 throw 하거나 절대 반환하지 않는 함수(무한루프일때 쓰이네요)\r\n\r\n```tsx\r\nfunction neverEnd(): never {\r\n  while (true) {\r\n\r\n  }\r\n}\r\n\r\nfunction error(message: string): never {\r\n    throw new Error(message);\r\n}\r\n```\r\n\r\n## 2. 함수\r\n\r\n### 함수의 기본적인 타입 선언\r\n\r\n자바스크립트와의 차이점은 **매개 변수**와 **반환 값**에 타입 부여\r\n\r\n```tsx\r\nfunction sum(a: number, b: number): number {\r\n\treturn a + b;\r\n}\r\n```\r\n\r\n### 함수의 인자\r\n\r\n전달 인자의 수가 더 많거나 적거나 하면 당연히 안되겠죠? 당연히 타입도 다르면 안되요\r\n\r\n```tsx\r\nfunction sum(a: number, b: number): number {\r\n  return a + b;\r\n}\r\nsum(10, 20); // 30\r\nsum(10, 20, 30); // error, too many parameters\r\nsum(10); // error, too few parameters\r\n```\r\n\r\n### 선택적 매개변수\r\n\r\n하지만 매개변수에 ?를 달아주면 그 전달인자를 넘기지 않아도 됩니다.\r\n\r\n```tsx\r\nfunction sum(a: number, b?: number): number {\r\n  return a + b;\r\n}\r\nsum(10, 20); // 30\r\nsum(10, 20, 30); // error, too many parameters\r\nsum(10); // 10\r\n```\r\n\r\n```tsx\r\n// error 필수 매개변수가 선택적 매개변수 \r\n// 선택적 매개변수가 앞에 있으면 안됩니다.\r\nfunction sum(a?: number, b: number): number {\r\n  return a + b;\r\n}\r\n```\r\n\r\n기본값도 설정해 줄 수 있습니다.\r\n\r\n```tsx\r\nfunction sum(a: number, b = 100): number {\r\n  return a + b;\r\n}\r\nsum(10, undefined); // 110\r\nsum(10, 20, 30); // error, too many parameters\r\nsum(10); // 110\r\n```\r\n\r\n### 인터페이스\r\n\r\n인터페이스는 상호간의 정의한 약속이나 규칙을 의미한다.\r\n\r\n객체의 속성과 속성타입\r\n\r\n함수의 매개변수나 반환타입\r\n\r\n배열과 객체를 접근하는 방식\r\n\r\n클래스\r\n\r\nlogAge 메소드는 age라는 속성을 갖고 number타입을 갖는 객체를 받는것을 약속했다.\r\n\r\n```tsx\r\nlet person = { name: 'Capt', age: 28 };\r\n\r\nfunction logAge(obj: { age: number }) {\r\n  console.log(obj.age); // 28\r\n}\r\nlogAge(person); // 28\r\n```\r\n\r\n```tsx\r\ninterface personAge {\r\n  age: number;\r\n}\r\n\r\nfunction logAge(obj: personAge) {\r\n  console.log(obj.age);\r\n}\r\nlet person = { name: 'Capt', age: 28 };\r\nlogAge(person);\r\n```\r\n\r\n### 옵션속성\r\n\r\n아까 매개변수때와 마찬가지로 ?를 붙혀주면 그 속성을 모두 다 꼭 사용하지 않아도 됩니다.\r\n\r\n```tsx\r\ninterface CraftBeer {\r\n  name: string;\r\n  hop?: number;  \r\n}\r\n\r\nlet myBeer = {\r\n  name: 'Saporo'\r\n};\r\nfunction brewBeer(beer: CraftBeer) {\r\n  console.log(beer.name); // Saporo\r\n}\r\nbrewBeer(myBeer);\r\n```\r\n\r\n### 읽기 전용 속성\r\n\r\nreadonly가 붙은 속성은 읽는것만 된다.\r\n\r\n```tsx\r\ninterface CraftBeer {\r\n  readonly brand: string;\r\n}\r\n\r\nlet myBeer: CraftBeer = {\r\n  brand: 'Belgian Monk'\r\n};\r\nmyBeer.brand = 'Korean Carpenter'; // error!\r\n```\r\n\r\n### 읽기 전용 배열\r\n\r\nReadonlyArray로 선언하면 배열 내용 변경 불가ReadonlyArray로 선언하면 배열 내용 변경 불가\r\n\r\n```tsx\r\nlet arr: ReadonlyArray<number> = [1,2,3];\r\narr.splice(0,1); // error\r\narr.push(4); // error\r\narr[0] = 100; // error\r\narr = [10, 20, 30]; // error\r\n```\r\n\r\n객체 선언과 관련된 타입 체킹\r\n\r\n```tsx\r\ninterface CraftBeer {\r\n  brand?: string;\r\n}\r\n\r\nfunction brewBeer(beer: CraftBeer) {\r\n  // ..\r\n}\r\nbrewBeer({ brandon: 'what' }); // 속성이 다르니 에러뜹니다.\r\n```\r\n\r\n이러면 타입 체크를 무시한다.\r\n\r\n```tsx\r\nlet myBeer = { brandon: 'what' }';\r\nbrewBeer(myBeer as CraftBeer);\r\n```\r\n\r\n### 함수 타입\r\n\r\n함수 매개변수와 반환타입도 인터페이스 정의가 가능하다.\r\n\r\n```tsx\r\ninterface login {\r\n  (username: string, password: string): boolean;\r\n}\r\n\r\nlet loginUser: login; // 함수 저장할 변수 선언\r\nloginUser = function(id: string, pw: string) {\r\n  console.log('로그인 했습니다');\r\n  return true;\r\n}\r\n```\r\n\r\n클래스 타입\r\n\r\n자바의 인터페이스와 목적이 비슷한데\r\n\r\n어떤 인터페이스를 implements한 클래스가 있다면\r\n\r\n인터페이스의 메소드와 변수가 있다는 것을 보장한다.\r\n\r\n```tsx\r\ninterface CraftBeer {\r\n  beerName: string;\r\n  nameBeer(beer: string): void;\r\n}\r\n\r\nclass myBeer implements CraftBeer {\r\n  beerName: string = 'Baby Guinness';\r\n  nameBeer(b: string) {\r\n    this.beerName = b;\r\n  }\r\n  constructor() {}\r\n}\r\n```\r\n\r\n인터페이스 끼리 상속도 가능합니다.\r\n\r\n```tsx\r\ninterface Person {\r\n  name: string;\r\n}\r\ninterface Drinker {\r\n  drink: string;\r\n}\r\ninterface Developer extends Person {\r\n  skill: string;\r\n}\r\nlet fe = {} as Developer;\r\nfe.name = 'josh';\r\nfe.skill = 'TypeScript';\r\nfe.drink = 'Beer';\r\n```\r\n\r\n## 4. Enum\r\n\r\n> 특정 값들의 **집합**을 의미하는 자료형으로 크게 {숫자형 이넘, 문자형 이넘} 두 가지가 있다\r\n\r\n- Enum이라는 개념을 이해하기 어려웠던 이유는, javascript에는 enum이 없었기 때문이다. (하지만 검색해보니 C언어에서는 제공하는 것 같음.)\r\n\r\n### 4-1. 숫자형 이넘\r\n\r\n```tsx\r\nenum Direction {\r\n  Up = 1,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n```\r\n\r\n특이한 것은 이렇게 선언하면  양방향으로 호출할 수 있는 특이한 자료구조가 된다는 것이다.\r\n\r\n```tsx\r\nconsole.log(Direction[1])    // \"Up\"\r\nconsole.log(Direction[\"Up\"]) // 1\r\nconsole.log(Direction[3])    // \"Left\"\r\n```\r\n\r\n이와 같이 숫자형 Enum에서 Direction.Up 으로 1값을 얻거나 반대로 Direction[1]로 \"Up\"값을 얻는 것을 **`리버스 매핑`** 이라고 한다.\r\n\r\n이렇게 초기값을 선언해주면 1, 2, 3, 4 의 순서로 1씩 증가하며 할당된다. 만약,\r\n\r\n```tsx\r\nenum Direction {\r\n\tUp, \r\n\tDown,\r\n\tLeft,\r\n\tRight\r\n}\r\n```\r\n\r\n으로 선언되었다면 Up - 0 , Down - 1, Left - 2, Right - 3이 된다.\r\n\r\n### 4-2 숫자형 enum 사용\r\n\r\n```tsx\r\nenum Response {\r\n  No = 0,\r\n  Yes = 1,\r\n}\r\n\r\nfunction respond(recipient: string, message: Response): void {\r\n  console.log(recipient, message)\r\n}\r\n\r\nrespond(\"Captain Pangyo\", Response.Yes);\r\n\r\n--------------------\r\n[LOG]: \"Captain Pangyo\",  1\r\n```\r\n\r\n### 4-3. 문자형 enum\r\n\r\n> 문자형 이넘은 이넘 값 전부 다 특정 문자 또는 다른 이넘 값으로 초기화 해줘야 합니다.\r\n\r\n```tsx\r\nenum Direction {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n    Left = \"LEFT\",\r\n    Right = \"RIGHT\",\r\n}\r\n```\r\n\r\n** 복합 enums **\r\n\r\n문자와 숫자를 혼합하여 enum을 생성할 수 있으나, 권장하지 않는 방식!\r\n\r\n```tsx\r\nenum BooleanLikeHeterogeneousEnum {\r\n    No = 0,\r\n    Yes = \"YES\",\r\n}\r\n```\r\n\r\n### 4-4. 런타임 시점에서의 이넘 특징\r\n\r\n이넘은 런타임시에 실제 객체 형태로 존재합니다. 예를 들어 아래와 같은 이넘 코드가 있을 때\r\n\r\n```tsx\r\nenum E {\r\n  X, Y, Z\r\n}\r\n\r\nfunction getX(obj: { X: number }) {\r\n  return obj.X;\r\n}\r\ngetX(E); // 이넘 E의 X는 숫자이기 때문에 정상 동작\r\n-----\r\nQuiz. \r\ngetX(E)값을 변수에 넣어서 출력한다면, 얼마나 나올까?\r\n```\r\n\r\n### 4-5. 컴파일 시점에서의 이넘 특징\r\n\r\n```tsx\r\nenum LogLevel {\r\n  ERROR, WARN, INFO, DEBUG\r\n}\r\n\r\n// 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';\r\ntype LogLevelStrings = keyof typeof LogLevel;\r\n\r\nfunction printImportant(key: LogLevelStrings, message: string) {\r\n    const num = LogLevel[key];\r\n    if (num <= LogLevel.WARN) {\r\n       console.log('Log level key is: ', key);\r\n       console.log('Log level value is: ', num);\r\n       console.log('Log level message is: ', message);\r\n    }\r\n}\r\nprintImportant('ERROR', 'This is a message');\r\n\r\n-------\r\n[LOG]: \"Log level key is: \",  \"ERROR\" \r\n[LOG]: \"Log level value is: \",  0 \r\n[LOG]: \"Log level message is: \",  \"This is a message\"\r\n```\r\n\r\n### 4-6. Typescript enum을 사용하는 이유\r\n\r\nEnum은 추상화의 수단이다.\r\n\r\n다국어 코드 (Language Code)를 할당한다고 생각해보자\r\n\r\n```tsx\r\ntype LanguageCode = 'ko' | 'en' | 'ja' | 'zh' | 'es'\r\n\r\nconst code: LanguageCode = 'ko'\r\n\r\nconsole.log(code) // [LOG]: \"ko\"\r\n\r\n하지만 \r\ncost code: LanguageCode = 'hahahaha'\r\n와 같이 코드를 짜면 typescript에서 에러로 표시해준다.\r\n```\r\n\r\n이것도 좋지만 데이터 양이 많아지면 가독성이 많이 떨어진다.\r\n\r\n우리가 원하는 것은 korean을 검색하면 'ko'라는 코드가 나왔으면 하는 것이고 기존 방식으로는 다음과 같이 두 가지 방법이 있다.\r\n\r\n```tsx\r\n// 이렇게 하면 언어 코드가 위아래에 중복되고\r\nconst korean = 'ko'\r\nconst english = 'en'\r\nconst japanese = 'ja'\r\nconst chinese = 'zh'\r\nconst spanish = 'es'\r\ntype LanguageCode = 'ko' | 'en' | 'ja' | 'zh' | 'es'\r\nlet code: LanguageCode = english\r\nconsole.log(code) // \"en\"\r\n```\r\n\r\n```tsx\r\n// 이렇게 하면 코드가 너무 길어집니다\r\nconst korean = 'ko'\r\nconst english = 'en'\r\nconst japanese = 'ja'\r\nconst chinese = 'zh'\r\nconst spanish = 'es'\r\ntype LanguageCode = typeof korean | typeof english | typeof japanese | typeof chinese | typeof spanish\r\nlet code: LanguageCode = spanish\r\nconsole.log(code) // \"es\"\r\n```\r\n\r\n이러한 이유 때문에 리터럴의 타입과 값에 이름을 붙인 `enum`을 활용하면 가독성을 크게 높일 수 있습니다.\r\n\r\n```tsx\r\nenum LanguageCode {\r\n  korean = 'ko',\r\n  english = 'en',\r\n  japanese = 'ja',\r\n  chinese = 'zh',\r\n  spanish = 'es',\r\n}\r\n// 여기서 \r\n// LanguageCode.korean === 'ko'\r\n// (의미상) LanguageCode === 'ko' | 'en' | 'ja' | 'zh' | 'es'\r\nconst code: LanguageCode = LanguageCode.korean\r\nconsole.log(code) // \"ko\"\r\n```\r\n\r\n### 4-7. Typescript enum을 사용하지 않는 이유\r\n\r\n### Tree-shaking은 무엇인가요?\r\n\r\nTree-shaking이란 간단하게 말해 사용하지 않는 코드를 삭제하는 기능을 말합니다. 나무를 흔들면 죽은 잎사귀들이 떨어지는 모습에 착안해 Tree-shaking이라고 부릅니다. Tree-shaking을 통해 export했지만 아무 데서도 import하지 않은 모듈이나 사용하지 않는 코드를 삭제해서 번들 크기를 줄여 페이지가 표시되는 시간을 단축할 수 있습니다.\r\n\r\n하지만 enum을 사용하게 되면 Tree-shaking이 되지 않습니다.\r\n\r\n결론적으로  Tree-shaking 관점에서 보았을 때 아래와 같은 순서로 사용하시길 추천하며 글을 마치겠습니다.\r\n\r\n> Union Types > const enum > enum\r\n\r\n**정리**\r\n\r\n- 같은 ‘종류’를 나타내는 여러 개의 숫자 혹은 문자열을 다뤄야 하는데, \r\n각각 적당한 이름을 붙여서 코드의 가독성을 높이고 싶다면 enum을 사용!\r\n\r\n## 5. 연산자를 이용한 타입 정의\r\n\r\n### 5-1. Union Type ( | )\r\n\r\n유니온 타입(Union Type)이란 자바스크립트의 OR 연산자(||)와 같이 A이거나 B이다 라는 의미의 타입\r\n\r\n```tsx\r\nfunction logText(text: string | number) {\r\n  // ...\r\n}\r\n```\r\n\r\n- text는 string이거나 (OR || ) number이다. 즉, 둘 다 올 수 있다는 뜻.\r\n- 이처럼 `|` 연산자를 이용하여 타입을 여러 개 연결하는 방식을 `유니온 타입 정의 방식` 이라 부른다.\r\n\r\n```tsx\r\nfunction getAge(age: number | string) {\r\n  if (typeof age === 'number') {\r\n    age.toFixed(); // 정상 동작, age의 타입이 `number`로 추론되기 때문에 숫자 관련된 API를 쉽게 자동완성 할 수 있다.\r\n    return age;\r\n  }\r\n  if (typeof age === 'string') {\r\n    return age;\r\n  }\r\n  return new TypeError('age must be number or string');\r\n}\r\nconsole.log(getAge(10))\r\nconsole.log(getAge('Hello World'))\r\nconsole.log(getAge(true))\r\n--- 출력 ---\r\n[LOG]: 10 \r\n[LOG]: \"Hello World\" \r\n[LOG]: age must be number or string\r\n```\r\n\r\n### 5-2. Intersection Type ( & )\r\n\r\n여러 타입을 모두 만족하는 하나의 타입을 의미.\r\n\r\n```tsx\r\ninterface Person {\r\n  name: string;\r\n  age: number;\r\n}\r\ninterface Developer {\r\n  name: string;\r\n  skill: number;\r\n}\r\ntype Capt = Person & Developer;\r\n```\r\n\r\n```tsx\r\n// Capt의 타입은\r\n\r\n{\r\n  name: string;\r\n  age: number;\r\n  skill: string;\r\n}\r\n```\r\n\r\n![Intersection Type](https://joshua1988.github.io/ts/assets/img/intersection-diagram.01f4fdfe.png)\r\n\r\n### 5-3. Union Type을 쓸 때 주의할 점\r\n\r\n```tsx\r\ninterface Person {\r\n  name: string;\r\n  age: number;\r\n}\r\ninterface Developer {\r\n  name: string;\r\n  skill: string;\r\n}\r\nfunction introduce(someone: Person | Developer) {\r\n  someone.name; // O 정상 동작\r\n  someone.age; // X 타입 오류 -> 타입스크립트에서 빨간줄로 표시해줌\r\n  someone.skill; // X 타입 오류 -> 타입스크립트에서 빨간줄로 표시해줌\r\n}\r\n```\r\n\r\n유니온 타입은 A도 될 수 있고 B도 될 수 있는 타입이지라고 생각하면 파라미터의 타입이 Person도 되고 Developer도 될테니까 함수 안에서 당연히 이 인터페이스들이 제공하는 속성들인 age나 skill를 사용할 수 있겠지라고 생각할 수 있습니다. \r\n\r\n하지만, 타입스크립트 관점에서는 introduce() 함수를 호출하는 시점에 Person 타입이 올지 Developer 타입이 올지 알 수가 없기 때문에 어느 타입이 들어오든 간에 오류가 안 나는 방향으로 타입을 추론하게 됩니다.\r\n\r\n따라서 위의 예시 같은 경우에는 의도와는 달리 [someone.name](http://someone.name) 만 정상적으로 작동하게 됩니다.\r\n\r\n## 6. Class\r\n\r\n### 6-1. Readonly\r\n\r\n```tsx\r\nclass Developer {\r\n    readonly name: string;\r\n    constructor(theName: string) {\r\n        this.name = theName;\r\n    }\r\n}\r\nlet john = new Developer(\"John\");\r\njohn.name = \"John\"; // error! name is readonly.\r\nconsole.log(john)\r\n--- 출력 ---\r\n[LOG]: Developer: {\r\n  \"name\": \"John\"\r\n}\r\n```\r\n\r\n### 6-2. Accessor\r\n\r\n타입스크립트는 객체의 특정 속성의 접근과 할당에 대해 제어할 수 있습니다. 이를 위해선 해당 객체가 클래스로 생성한 객체여야 합니다. 아래의 간단한 예제를 봅시다.\r\n\r\n```tsx\r\nclass Developer {\r\n  name: string;\r\n}\r\nconst josh = new Developer();\r\njosh.name = 'Josh Bolton';\r\n```\r\n\r\n위 코드는 클래스로 생성한 객체의 `name` 속성에 `Josh Bolton`이라는 값을 대입한 코드입니다. 이제 `josh`라는 객체의 `name` 속성은 `Josh Bolton`이라는 값을 갖겠죠.\r\n\r\n여기서 만약 `name` 속성에 제약 사항을 추가하고 싶다면 아래와 같이 `get`과 `set`을 활용합니다.\r\n\r\n```tsx\r\nclass Developer {\r\n  private name: string;\r\n  \r\n  get name(): string {\r\n    return this.name;\r\n  }\r\n\r\n  set name(newValue: string) {\r\n    if (newValue && newValue.length > 5) {\r\n      throw new Error('이름이 너무 깁니다');\r\n    }\r\n    this.name = newValue;\r\n  }\r\n}\r\nconst josh = new Developer();\r\njosh.name = 'Josh Bolton'; // Error\r\njosh.name = 'Josh';\r\n```\r\n\r\nTIP!\r\nget만 선언하고 set을 선언하지 않는 경우에는 자동으로 readonly로 인식됩니다.\r\n\r\n### 6-3. Abstract Class\r\n\r\n추상 클래스(Abstract Class)는 인터페이스와 비슷한 역할을 하면서도 조금 다른 특징을 갖고 있습니다. 추상 클래스는 특정 클래스의 상속 대상이 되는 클래스이며 좀 더 상위 레벨에서 속성, 메서드의 모양을 정의합니다.\r\n\r\n```tsx\r\nabstract class Developer {\r\n  abstract coding(): void; // 'abstract'가 붙으면 상속 받은 클래스에서 무조건 구현해야 함\r\n  drink(): void {\r\n    console.log('drink sth');\r\n  }\r\n}\r\n\r\nclass FrontEndDeveloper extends Developer {\r\n  coding(): void {\r\n    // Developer 클래스를 상속 받은 클래스에서 무조건 정의해야 하는 메서드\r\n    console.log('develop web');\r\n  }\r\n  design(): void {\r\n    console.log('design web');\r\n  }\r\n}\r\nconst dev = new Developer(); // error: cannot create an instance of an abstract class\r\nconst josh = new FrontEndDeveloper();\r\njosh.coding(); // develop web\r\njosh.drink(); // drink sth\r\njosh.design(); // design web\r\n```\r\n\r\n\r\n\r\n\r\n---\r\nReferences\r\nhttps://joshua1988.github.io/ts/\r\n\r\n[TypeScript enum을 사용하는 이유](https://medium.com/@seungha_kim_IT/typescript-enum을-사용하는-이유-3b3ccd8e5552)\r\n\r\n[TypeScript enum을 사용하지 않는 게 좋은 이유](https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/)\r\n\r\n[C언어 Enum](https://dojang.io/mod/page/view.php?id=480)");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,