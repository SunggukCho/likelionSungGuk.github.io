self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/language/javascript/2021-08-03-ES2021-최신자바스크립트-새롭게추가된-기능.md":
/*!***********************************************************************************!*\
  !*** ./contents/blog/language/javascript/2021-08-03-ES2021-최신자바스크립트-새롭게추가된-기능.md ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"ES2021 최신 자바스크립트 새롭게 추가된 기능 살펴보기\"\r\ndate: \"2021.08.03\"\r\ntags: \r\n    - javascript\r\n---\r\n\r\n# ES2021 최신 자바스크립트 새롭게 추가된 기능을 알아보자\r\n\r\n## replaceAll\r\n\r\nString을 변경해주는 replace의 upgrade 버전이다. \r\n\r\n'그냥 replace쓰면 되는거 아니야?'라고 생각할 수 있지만 특수문자가 들어간 경우 정규표현식을 써야해서 다소 복잡해지는 경우가 많은데, replaceAll이 있으면 훨씬 간편하다. 비교해서 보자.\r\n\r\n\r\n\r\n> Mike와 Car앞뒤로 있는 대괄호를 중괄호로 바꿔보자.\r\n\r\n```javascript\r\n// replace\r\nconst str1 = \"I'm [Mike]. This is Tom's [Car]\";\r\nstr1.replace(/\\[/g, \"~\").replace(/\\]/g, \"~\");\r\n```\r\n\r\n이렇게 정규표현식을 써서 대괄호의 각각'[' , ']'을 설정하고 'g'로 모든 해당 기호를 선택한 뒤 변경해줘야한다.\r\n\r\n```javascript\r\n// replaceAll\r\nconst str2 = \"I'm [Mike]. This is Tom's [Car]\";\r\nstr2.replaceAll(\"[\", \"~\").replaceAll(\"]\", \"~\")\r\n```\r\n\r\n정규표현식을 쓸 필요없이 직관적으로 쉽게 사용이 가능하다.\r\n\r\n\r\n\r\n## Promise.any\r\n\r\npromise.race의 경우 가장 빠르게 처리되는 객체를 반환합니다.\r\n\r\n예를 들어 두 개의 Promise요청이 있을 경우, Reject된 요청이 더 빠르게 도착한다면 promise.race는 'Reject'를 반환 할 것입니다.\r\n\r\n하지만 우리는 여러개의 요청 중 하나만이라도 성공하는게 있는지 알고 싶을 때가 있습니다. 이 경우 새로 생긴 `Promise.any`를 사용할 수 있습니다.\r\n\r\n```javascript\r\n// 1. \r\nconst Fail = new Promise((res, reject) => {\r\n    setTimeOut(()=> {\r\n        reject(\"fail..\")\r\n    }, 1000)\r\n})\r\nconst Success = new Promise((res, reject) => {\r\n    setTimeOut(()=> {\r\n        res(\"success!\")\r\n    }, 2000)\r\n})\r\n\r\nconst promiseRace = Promise.race([Fail, Success])\r\n// log -> fail..\r\nconst promiseAny = Promise.any([Fail, Success])\r\n// log -> sucess!\r\n```\r\n\r\n\r\n\r\n## ||= , &&= , ??=\r\n\r\n정식명칭은 `Logical Assignment Operator` 입니다. \r\n\r\n```javascript\r\n// 1. ||=\r\n    name = name || 'anonymous'\r\n위 코드는 다음과 같이 쓰일 수 있습니다.\r\n    name ||= 'anonymous'\r\n\r\n// 2. &&=\r\n    name = name && `Hello ${name}`\r\n\t\t\t===\r\n    name &&= `Hello ${name}`;\r\n\r\n// 3. ??= (Null병합연산자)\r\n\tname = name ?? \"Mike\";\r\n\tname ??= \"Mike\"\r\n```\r\n\r\n- Null 병합 연산자와 OR의 차이는 다음과 같다.\r\n\r\n  - `**||**` : 앞의 값이 falsy이면 뒤의 값\r\n  - `**??**` : 앞의 값이 null이나 undefined 이면 뒤의 값 \r\n\r\n  ```javascript\r\n  let num = 0\r\n  let a = num || 3\r\n  // a는?\r\n  // -> a = 3\r\n  \r\n  let b = num ?? 3\r\n  // b는? \r\n  // -> b = 0\r\n  null이나 undefined가 아니므로 num(0)이 b가 된다.\r\n  ```\r\n\r\n  \r\n");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29udGVudHMvYmxvZy9sYW5ndWFnZS9qYXZhc2NyaXB0LzIwMjEtMDgtMDMtRVMyMDIxLey1nOyLoOyekOuwlOyKpO2BrOumve2KuC3sg4jroa3qsozstpTqsIDrkJwt6riw64qlLm1kIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrREFBZSw4ZEFBOGQsdURBQXVELDRLQUE0SyxrY0FBa2MseUJBQXlCLHVDQUF1QyxZQUFZLG1EQUFtRCx5QkFBeUIsc0NBQXNDLFlBQVksNFpBQTRaLEtBQUssd0NBQXdDLEtBQUssRUFBRSwyREFBMkQsdVhBQXVYLEUiLCJmaWxlIjoic3RhdGljL3dlYnBhY2svcGFnZXMvX2FwcC5kMDIxZDkzNjA0ZDRjYmVhNmM1MS5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCItLS1cXHJcXG50aXRsZTogXFxcIkVTMjAyMSDstZzsi6Ag7J6Q67CU7Iqk7YGs66a97Yq4IOyDiOuhreqyjCDstpTqsIDrkJwg6riw64qlIOyCtO2OtOuztOq4sFxcXCJcXHJcXG5kYXRlOiBcXFwiMjAyMS4wOC4wM1xcXCJcXHJcXG50YWdzOiBcXHJcXG4gICAgLSBqYXZhc2NyaXB0XFxyXFxuLS0tXFxyXFxuXFxyXFxuIyBFUzIwMjEg7LWc7IugIOyekOuwlOyKpO2BrOumve2KuCDsg4jroa3qsowg7LaU6rCA65CcIOq4sOuKpeydhCDslYzslYTrs7TsnpBcXHJcXG5cXHJcXG4jIyByZXBsYWNlQWxsXFxyXFxuXFxyXFxuU3RyaW5n7J2EIOuzgOqyve2VtOyjvOuKlCByZXBsYWNl7J2YIHVwZ3JhZGUg67KE7KCE7J2064ukLiBcXHJcXG5cXHJcXG4n6re464OlIHJlcGxhY2Xsk7DrqbQg65CY64qU6rGwIOyVhOuLiOyVvD8n65286rOgIOyDneqwge2VoCDsiJgg7J6I7KeA66eMIO2KueyImOusuOyekOqwgCDrk6TslrTqsIQg6rK97JqwIOygleq3nO2RnO2YhOyLneydhCDsjajslbztlbTshJwg64uk7IaMIOuzteyeoe2VtOyngOuKlCDqsr3smrDqsIAg66eO7J2A642wLCByZXBsYWNlQWxs7J20IOyeiOycvOuptCDtm6jslKwg6rCE7Y647ZWY64ukLiDruYTqtZDtlbTshJwg67O07J6QLlxcclxcblxcclxcblxcclxcblxcclxcbj4gTWlrZeyZgCBDYXLslZ7rkqTroZwg7J6I64qUIOuMgOq0hO2YuOulvCDspJHqtITtmLjroZwg67CU6r+U67O07J6QLlxcclxcblxcclxcbmBgYGphdmFzY3JpcHRcXHJcXG4vLyByZXBsYWNlXFxyXFxuY29uc3Qgc3RyMSA9IFxcXCJJJ20gW01pa2VdLiBUaGlzIGlzIFRvbSdzIFtDYXJdXFxcIjtcXHJcXG5zdHIxLnJlcGxhY2UoL1xcXFxbL2csIFxcXCJ+XFxcIikucmVwbGFjZSgvXFxcXF0vZywgXFxcIn5cXFwiKTtcXHJcXG5gYGBcXHJcXG5cXHJcXG7snbTroIfqsowg7KCV6rec7ZGc7ZiE7Iud7J2EIOyNqOyEnCDrjIDqtITtmLjsnZgg6rCB6rCBJ1snICwgJ10n7J2EIOyEpOygle2VmOqzoCAnZyfroZwg66qo65OgIO2VtOuLuSDquLDtmLjrpbwg7ISg7YOd7ZWcIOuSpCDrs4Dqsr3tlbTspJjslbztlZzri6QuXFxyXFxuXFxyXFxuYGBgamF2YXNjcmlwdFxcclxcbi8vIHJlcGxhY2VBbGxcXHJcXG5jb25zdCBzdHIyID0gXFxcIkknbSBbTWlrZV0uIFRoaXMgaXMgVG9tJ3MgW0Nhcl1cXFwiO1xcclxcbnN0cjIucmVwbGFjZUFsbChcXFwiW1xcXCIsIFxcXCJ+XFxcIikucmVwbGFjZUFsbChcXFwiXVxcXCIsIFxcXCJ+XFxcIilcXHJcXG5gYGBcXHJcXG5cXHJcXG7soJXqt5ztkZztmITsi53snYQg7JO4IO2VhOyalOyXhuydtCDsp4HqtIDsoIHsnLzroZwg7Im96rKMIOyCrOyaqeydtCDqsIDriqXtlZjri6QuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuIyMgUHJvbWlzZS5hbnlcXHJcXG5cXHJcXG5wcm9taXNlLnJhY2XsnZgg6rK97JqwIOqwgOyepSDruaDrpbTqsowg7LKY66as65CY64qUIOqwneyytOulvCDrsJjtmZjtlanri4jri6QuXFxyXFxuXFxyXFxu7JiI66W8IOuTpOyWtCDrkZAg6rCc7J2YIFByb21pc2XsmpTssq3snbQg7J6I7J2EIOqyveyasCwgUmVqZWN065CcIOyalOyyreydtCDrjZQg67mg66W06rKMIOuPhOywqe2VnOuLpOuptCBwcm9taXNlLnJhY2XripQgJ1JlamVjdCfrpbwg67CY7ZmYIO2VoCDqsoPsnoXri4jri6QuXFxyXFxuXFxyXFxu7ZWY7KeA66eMIOyasOumrOuKlCDsl6zrn6zqsJzsnZgg7JqU7LKtIOykkSDtlZjrgpjrp4zsnbTrnbzrj4Qg7ISx6rO17ZWY64qU6rKMIOyeiOuKlOyngCDslYzqs6Ag7Iu27J2EIOuVjOqwgCDsnojsirXri4jri6QuIOydtCDqsr3smrAg7IOI66GcIOyDneq4tCBgUHJvbWlzZS5hbnlg66W8IOyCrOyaqe2VoCDsiJgg7J6I7Iq164uI64ukLlxcclxcblxcclxcbmBgYGphdmFzY3JpcHRcXHJcXG4vLyAxLiBcXHJcXG5jb25zdCBGYWlsID0gbmV3IFByb21pc2UoKHJlcywgcmVqZWN0KSA9PiB7XFxyXFxuICAgIHNldFRpbWVPdXQoKCk9PiB7XFxyXFxuICAgICAgICByZWplY3QoXFxcImZhaWwuLlxcXCIpXFxyXFxuICAgIH0sIDEwMDApXFxyXFxufSlcXHJcXG5jb25zdCBTdWNjZXNzID0gbmV3IFByb21pc2UoKHJlcywgcmVqZWN0KSA9PiB7XFxyXFxuICAgIHNldFRpbWVPdXQoKCk9PiB7XFxyXFxuICAgICAgICByZXMoXFxcInN1Y2Nlc3MhXFxcIilcXHJcXG4gICAgfSwgMjAwMClcXHJcXG59KVxcclxcblxcclxcbmNvbnN0IHByb21pc2VSYWNlID0gUHJvbWlzZS5yYWNlKFtGYWlsLCBTdWNjZXNzXSlcXHJcXG4vLyBsb2cgLT4gZmFpbC4uXFxyXFxuY29uc3QgcHJvbWlzZUFueSA9IFByb21pc2UuYW55KFtGYWlsLCBTdWNjZXNzXSlcXHJcXG4vLyBsb2cgLT4gc3VjZXNzIVxcclxcbmBgYFxcclxcblxcclxcblxcclxcblxcclxcbiMjIHx8PSAsICYmPSAsID8/PVxcclxcblxcclxcbuygleyLneuqhey5reydgCBgTG9naWNhbCBBc3NpZ25tZW50IE9wZXJhdG9yYCDsnoXri4jri6QuIFxcclxcblxcclxcbmBgYGphdmFzY3JpcHRcXHJcXG4vLyAxLiB8fD1cXHJcXG4gICAgbmFtZSA9IG5hbWUgfHwgJ2Fub255bW91cydcXHJcXG7snIQg7L2U65Oc64qUIOuLpOydjOqzvCDqsJnsnbQg7JOw7J28IOyImCDsnojsirXri4jri6QuXFxyXFxuICAgIG5hbWUgfHw9ICdhbm9ueW1vdXMnXFxyXFxuXFxyXFxuLy8gMi4gJiY9XFxyXFxuICAgIG5hbWUgPSBuYW1lICYmIGBIZWxsbyAke25hbWV9YFxcclxcblxcdFxcdFxcdD09PVxcclxcbiAgICBuYW1lICYmPSBgSGVsbG8gJHtuYW1lfWA7XFxyXFxuXFxyXFxuLy8gMy4gPz89IChOdWxs67OR7ZWp7Jew7IKw7J6QKVxcclxcblxcdG5hbWUgPSBuYW1lID8/IFxcXCJNaWtlXFxcIjtcXHJcXG5cXHRuYW1lID8/PSBcXFwiTWlrZVxcXCJcXHJcXG5gYGBcXHJcXG5cXHJcXG4tIE51bGwg67OR7ZWpIOyXsOyCsOyekOyZgCBPUuydmCDssKjsnbTripQg64uk7J2M6rO8IOqwmeuLpC5cXHJcXG5cXHJcXG4gIC0gYCoqfHwqKmAgOiDslZ7snZgg6rCS7J20IGZhbHN57J2066m0IOuSpOydmCDqsJJcXHJcXG4gIC0gYCoqPz8qKmAgOiDslZ7snZgg6rCS7J20IG51bGzsnbTrgpggdW5kZWZpbmVkIOydtOuptCDrkqTsnZgg6rCSIFxcclxcblxcclxcbiAgYGBgamF2YXNjcmlwdFxcclxcbiAgbGV0IG51bSA9IDBcXHJcXG4gIGxldCBhID0gbnVtIHx8IDNcXHJcXG4gIC8vIGHripQ/XFxyXFxuICAvLyAtPiBhID0gM1xcclxcbiAgXFxyXFxuICBsZXQgYiA9IG51bSA/PyAzXFxyXFxuICAvLyBi64qUPyBcXHJcXG4gIC8vIC0+IGIgPSAwXFxyXFxuICBudWxs7J2064KYIHVuZGVmaW5lZOqwgCDslYTri4jrr4DroZwgbnVtKDAp7J20IGLqsIAg65Cc64ukLlxcclxcbiAgYGBgXFxyXFxuXFxyXFxuICBcXHJcXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9