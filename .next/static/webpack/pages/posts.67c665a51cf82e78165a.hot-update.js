self["webpackHotUpdate_N_E"]("pages/posts",{

/***/ "./contents/blog/language/javascript/2021-08-09-자바스크립트-var-let-const-진짜-차이점-구별하기.md":
/*!******************************************************************************************!*\
  !*** ./contents/blog/language/javascript/2021-08-09-자바스크립트-var-let-const-진짜-차이점-구별하기.md ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"자바스크립트 변수-var, let, const 꼭 알아야할 차이점\"\r\ndate: \"2021.08.09\"\r\ntags: \r\n  - javascript\r\n  - JS변수(var, let, const)\r\n---\r\n\r\n# 자바스크립트 변수 var, let, const 비교\r\n\r\n유튜브 `코딩앙마 채널`의 자바스크립트 중급 1편 var, let, const를 보다가 좋은 내용이 있어 정리합니다.\r\n\r\n\r\n\r\n## 호이스팅 \r\n\r\n선언하기 전에 호출된 var변수가 오류가 나지 않는다는 것을 거의 모든 프론트엔드 개발자라면 알고 있을 것입니다. 그 이유는 바로 hoisting 때문인데, ES6 이후 나온 let이나 const 로 변수를 선언하는 것은 var와 달리 이것이 되지 않는다. 그렇다면 let은 호이스팅 되지 않는 것일까?라는 의문이 들었습니다.\r\n\r\n\r\n\r\n### 💡 let도 hoisting된다.\r\n\r\n<u>결론부터 말하자면 let도 호이스팅 됩니다</u>. 하지만 var처럼 동작하지 않는 이유는 `변수의 생성단계 3가지 ` **\"선언\"-\"초기화\"-\"할당\"** 의 진행과정이 다르기 때문이다.\r\n\r\n| var                 | let       | const                         |\r\n| ------------------- | --------- | ----------------------------- |\r\n| 1. 선언 + 2. 초기화 | 1. 선언   | 1. 선언 + 2. 초기화 + 3. 할당 |\r\n| -                   | 2. 초기화 |                               |\r\n| 3. 할당             | 3. 할당   |                               |\r\n\r\n위 표에서 보듯이 **세 가지 변수설정 타입은 모두 다른 과정을 통해 변수를 생성**합니다.\r\n\r\n```javascript\r\n// 1. var\r\nconsole.log(name) // undefined\r\nvar name=\"홍길동\"\r\n\r\n// 2. let \r\nconsole.log(name) // Error: 레퍼런스 에러\r\nlet name=\"홍길동\"\r\n\r\n// 3. const\r\nconsole.log(name) // Error\r\nconst name=\"홍길동\"\r\n\r\n// 4. const 추가\r\nconst name;\r\nname=\"홍길동\"\r\n```\r\n\r\n- var의 경우 아직 할당되지 않은 name을 먼저 호출하더라도 호이스팅된 변수명 name은 이미 알고 있으며 다만 해당 값은 undefined상태이다. 따라서 에러가 나지 않는다.\r\n\r\n- let의 경우 호이스팅은 되므로 name변수를 아예 모르는 것은 아니나, 초기화(name에 undefined)가 되지않았으므로 name에 해당하는 레퍼런스가 없어 레퍼런스 에러가 난다.\r\n- const의 경우 선언/초기화/할당 세 가지가 모두 한 번에 이뤄져야 하는데 그렇지 않았으므로 에러가 발생한다.\r\n- const의 경우 선언과 동시에 할당까지 이뤄져야 한다. 따라서 4번처럼 생성만 해두고 나중에 할당하면 오류가 발생한다.\r\n\r\n\r\n\r\n## 스코프\r\n\r\n| var                                                          | let, const                                             |\r\n| ------------------------------------------------------------ | ------------------------------------------------------ |\r\n| 함수 스코프                                                  | 블록 스코프                                            |\r\n| function() 단위                                              | if, while, for, try/catch문 등                         |\r\n| -> if문이나 while문 등 블록스코프 내에서 선언되어도 함수단위에서 호출이 가능함. <br />단, 함수단위를 넘어서는 곳에서의 호출은 안된다. | if문이나 while문등 선언된 블록 내에서만 호출이 가능함. |\r\n\r\n\r\n\r\n\r\n---\r\nRef.\r\n\r\n[유튜브 코딩앙마 채널](https://www.youtube.com/watch?v=ocGc-AmWSnQ&list=PLZKTXPmaJk8JZ2NAC538UzhY_UNqMdZB4)\r\n\r\n");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29udGVudHMvYmxvZy9sYW5ndWFnZS9qYXZhc2NyaXB0LzIwMjEtMDgtMDkt7J6Q67CU7Iqk7YGs66a97Yq4LXZhci1sZXQtY29uc3Qt7KeE7KecLeywqOydtOygkC3qtazrs4TtlZjquLAubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLCtEQUFlLGt4Q0FBa3hDLHFwQ0FBcXBDLEUiLCJmaWxlIjoic3RhdGljL3dlYnBhY2svcGFnZXMvcG9zdHMuNjdjNjY1YTUxY2Y4MmU3ODE2NWEuaG90LXVwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiLS0tXFxyXFxudGl0bGU6IFxcXCLsnpDrsJTsiqTtgazrpr3tirgg67OA7IiYLXZhciwgbGV0LCBjb25zdCDqvK0g7JWM7JWE7JW87ZWgIOywqOydtOygkFxcXCJcXHJcXG5kYXRlOiBcXFwiMjAyMS4wOC4wOVxcXCJcXHJcXG50YWdzOiBcXHJcXG4gIC0gamF2YXNjcmlwdFxcclxcbiAgLSBKU+uzgOyImCh2YXIsIGxldCwgY29uc3QpXFxyXFxuLS0tXFxyXFxuXFxyXFxuIyDsnpDrsJTsiqTtgazrpr3tirgg67OA7IiYIHZhciwgbGV0LCBjb25zdCDruYTqtZBcXHJcXG5cXHJcXG7snKDtipzruIwgYOy9lOuUqeyVmeuniCDssYTrhJBg7J2YIOyekOuwlOyKpO2BrOumve2KuCDspJHquIkgMe2OuCB2YXIsIGxldCwgY29uc3Trpbwg67O064uk6rCAIOyii+ydgCDrgrTsmqnsnbQg7J6I7Ja0IOygleumrO2VqeuLiOuLpC5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4jIyDtmLjsnbTsiqTtjIUgXFxyXFxuXFxyXFxu7ISg7Ja47ZWY6riwIOyghOyXkCDtmLjstpzrkJwgdmFy67OA7IiY6rCAIOyYpOulmOqwgCDrgpjsp4Ag7JWK64qU64uk64qUIOqyg+ydhCDqsbDsnZgg66qo65OgIO2UhOuhoO2KuOyXlOuTnCDqsJzrsJzsnpDrnbzrqbQg7JWM6rOgIOyeiOydhCDqsoPsnoXri4jri6QuIOq3uCDsnbTsnKDripQg67CU66GcIGhvaXN0aW5nIOuVjOusuOyduOuNsCwgRVM2IOydtO2bhCDrgpjsmKggbGV07J2064KYIGNvbnN0IOuhnCDrs4DsiJjrpbwg7ISg7Ja47ZWY64qUIOqyg+ydgCB2YXLsmYAg64us66asIOydtOqyg+ydtCDrkJjsp4Ag7JWK64qU64ukLiDqt7jroIfri6TrqbQgbGV07J2AIO2YuOydtOyKpO2MhSDrkJjsp4Ag7JWK64qUIOqyg+ydvOq5jD/rnbzripQg7J2Y66y47J20IOuTpOyXiOyKteuLiOuLpC5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4jIyMg8J+SoSBsZXTrj4QgaG9pc3RpbmfrkJzri6QuXFxyXFxuXFxyXFxuPHU+6rKw66Gg67aA7YSwIOunkO2VmOyekOuptCBsZXTrj4Qg7Zi47J207Iqk7YyFIOuQqeuLiOuLpDwvdT4uIO2VmOyngOunjCB2YXLsspjrn7wg64+Z7J6R7ZWY7KeAIOyViuuKlCDsnbTsnKDripQgYOuzgOyImOydmCDsg53shLHri6jqs4QgM+qwgOyngCBgICoqXFxcIuyEoOyWuFxcXCItXFxcIuy0iOq4sO2ZlFxcXCItXFxcIu2VoOuLuVxcXCIqKiDsnZgg7KeE7ZaJ6rO87KCV7J20IOuLpOultOq4sCDrlYzrrLjsnbTri6QuXFxyXFxuXFxyXFxufCB2YXIgICAgICAgICAgICAgICAgIHwgbGV0ICAgICAgIHwgY29uc3QgICAgICAgICAgICAgICAgICAgICAgICAgfFxcclxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcXHJcXG58IDEuIOyEoOyWuCArIDIuIOy0iOq4sO2ZlCB8IDEuIOyEoOyWuCAgIHwgMS4g7ISg7Ja4ICsgMi4g7LSI6riw7ZmUICsgMy4g7ZWg64u5IHxcXHJcXG58IC0gICAgICAgICAgICAgICAgICAgfCAyLiDstIjquLDtmZQgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XFxyXFxufCAzLiDtlaDri7kgICAgICAgICAgICAgfCAzLiDtlaDri7kgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcXHJcXG5cXHJcXG7snIQg7ZGc7JeQ7IScIOuztOuTr+ydtCAqKuyEuCDqsIDsp4Ag67OA7IiY7ISk7KCVIO2DgOyeheydgCDrqqjrkZAg64uk66W4IOqzvOygleydhCDthrXtlbQg67OA7IiY66W8IOyDneyEsSoq7ZWp64uI64ukLlxcclxcblxcclxcbmBgYGphdmFzY3JpcHRcXHJcXG4vLyAxLiB2YXJcXHJcXG5jb25zb2xlLmxvZyhuYW1lKSAvLyB1bmRlZmluZWRcXHJcXG52YXIgbmFtZT1cXFwi7ZmN6ri464+ZXFxcIlxcclxcblxcclxcbi8vIDIuIGxldCBcXHJcXG5jb25zb2xlLmxvZyhuYW1lKSAvLyBFcnJvcjog66CI7Y2865+w7IqkIOyXkOufrFxcclxcbmxldCBuYW1lPVxcXCLtmY3quLjrj5lcXFwiXFxyXFxuXFxyXFxuLy8gMy4gY29uc3RcXHJcXG5jb25zb2xlLmxvZyhuYW1lKSAvLyBFcnJvclxcclxcbmNvbnN0IG5hbWU9XFxcIu2Zjeq4uOuPmVxcXCJcXHJcXG5cXHJcXG4vLyA0LiBjb25zdCDstpTqsIBcXHJcXG5jb25zdCBuYW1lO1xcclxcbm5hbWU9XFxcIu2Zjeq4uOuPmVxcXCJcXHJcXG5gYGBcXHJcXG5cXHJcXG4tIHZhcuydmCDqsr3smrAg7JWE7KeBIO2VoOuLueuQmOyngCDslYrsnYAgbmFtZeydhCDrqLzsoIAg7Zi47Lac7ZWY642U652864+EIO2YuOydtOyKpO2MheuQnCDrs4DsiJjrqoUgbmFtZeydgCDsnbTrr7gg7JWM6rOgIOyeiOycvOupsCDri6Trp4wg7ZW064u5IOqwkuydgCB1bmRlZmluZWTsg4Htg5zsnbTri6QuIOuUsOudvOyEnCDsl5Drn6zqsIAg64KY7KeAIOyViuuKlOuLpC5cXHJcXG5cXHJcXG4tIGxldOydmCDqsr3smrAg7Zi47J207Iqk7YyF7J2AIOuQmOuvgOuhnCBuYW1l67OA7IiY66W8IOyVhOyYiCDrqqjrpbTripQg6rKD7J2AIOyVhOuLiOuCmCwg7LSI6riw7ZmUKG5hbWXsl5AgdW5kZWZpbmVkKeqwgCDrkJjsp4DslYrslZjsnLzrr4DroZwgbmFtZeyXkCDtlbTri7ntlZjripQg66CI7Y2865+w7Iqk6rCAIOyXhuyWtCDroIjtjbzrn7DsiqQg7JeQ65+s6rCAIOuCnOuLpC5cXHJcXG4tIGNvbnN07J2YIOqyveyasCDshKDslrgv7LSI6riw7ZmUL+2VoOuLuSDshLgg6rCA7KeA6rCAIOuqqOuRkCDtlZwg67KI7JeQIOydtOukhOyguOyVvCDtlZjripTrjbAg6re466CH7KeAIOyViuyVmOycvOuvgOuhnCDsl5Drn6zqsIAg67Cc7IOd7ZWc64ukLlxcclxcbi0gY29uc3TsnZgg6rK97JqwIOyEoOyWuOqzvCDrj5nsi5zsl5Ag7ZWg64u56rmM7KeAIOydtOukhOyguOyVvCDtlZzri6QuIOuUsOudvOyEnCA067KI7LKY65+8IOyDneyEseunjCDtlbTrkZDqs6Ag64KY7KSR7JeQIO2VoOuLue2VmOuptCDsmKTrpZjqsIAg67Cc7IOd7ZWc64ukLlxcclxcblxcclxcblxcclxcblxcclxcbiMjIOyKpOy9lO2UhFxcclxcblxcclxcbnwgdmFyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGV0LCBjb25zdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcXHJcXG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XFxyXFxufCDtlajsiJgg7Iqk7L2U7ZSEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IOu4lOuhnSDsiqTsvZTtlIQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcXHJcXG58IGZ1bmN0aW9uKCkg64uo7JyEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWYsIHdoaWxlLCBmb3IsIHRyeS9jYXRjaOusuCDrk7EgICAgICAgICAgICAgICAgICAgICAgICAgfFxcclxcbnwgLT4gaWbrrLjsnbTrgpggd2hpbGXrrLgg65OxIOu4lOuhneyKpOy9lO2UhCDrgrTsl5DshJwg7ISg7Ja465CY7Ja064+EIO2VqOyImOuLqOychOyXkOyEnCDtmLjstpzsnbQg6rCA64ql7ZWoLiA8YnIgLz7ri6gsIO2VqOyImOuLqOychOulvCDrhJjslrTshJzripQg6rOz7JeQ7ISc7J2YIO2YuOy2nOydgCDslYjrkJzri6QuIHwgaWbrrLjsnbTrgpggd2hpbGXrrLjrk7Eg7ISg7Ja465CcIOu4lOuhnSDrgrTsl5DshJzrp4wg7Zi47Lac7J20IOqwgOuKpe2VqC4gfFxcclxcblxcclxcblxcclxcblxcclxcblxcclxcbi0tLVxcclxcblJlZi5cXHJcXG5cXHJcXG5b7Jyg7Yqc67iMIOy9lOuUqeyVmeuniCDssYTrhJBdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9b2NHYy1BbVdTblEmbGlzdD1QTFpLVFhQbWFKazhKWjJOQUM1MzhVemhZX1VOcU1kWkI0KVxcclxcblxcclxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=