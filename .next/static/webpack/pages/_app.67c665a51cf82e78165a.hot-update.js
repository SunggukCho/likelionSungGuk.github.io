self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/language/javascript/2021-08-09-자바스크립트-var-let-const-진짜-차이점-구별하기.md":
/*!******************************************************************************************!*\
  !*** ./contents/blog/language/javascript/2021-08-09-자바스크립트-var-let-const-진짜-차이점-구별하기.md ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"자바스크립트 변수-var, let, const 꼭 알아야할 차이점\"\r\ndate: \"2021.08.09\"\r\ntags: \r\n  - javascript\r\n  - JS변수(var, let, const)\r\n---\r\n\r\n# 자바스크립트 변수 var, let, const 비교\r\n\r\n유튜브 `코딩앙마 채널`의 자바스크립트 중급 1편 var, let, const를 보다가 좋은 내용이 있어 정리합니다.\r\n\r\n\r\n\r\n## 호이스팅 \r\n\r\n선언하기 전에 호출된 var변수가 오류가 나지 않는다는 것을 거의 모든 프론트엔드 개발자라면 알고 있을 것입니다. 그 이유는 바로 hoisting 때문인데, ES6 이후 나온 let이나 const 로 변수를 선언하는 것은 var와 달리 이것이 되지 않는다. 그렇다면 let은 호이스팅 되지 않는 것일까?라는 의문이 들었습니다.\r\n\r\n\r\n\r\n### 💡 let도 hoisting된다.\r\n\r\n<u>결론부터 말하자면 let도 호이스팅 됩니다</u>. 하지만 var처럼 동작하지 않는 이유는 `변수의 생성단계 3가지 ` **\"선언\"-\"초기화\"-\"할당\"** 의 진행과정이 다르기 때문이다.\r\n\r\n| var                 | let       | const                         |\r\n| ------------------- | --------- | ----------------------------- |\r\n| 1. 선언 + 2. 초기화 | 1. 선언   | 1. 선언 + 2. 초기화 + 3. 할당 |\r\n| -                   | 2. 초기화 |                               |\r\n| 3. 할당             | 3. 할당   |                               |\r\n\r\n위 표에서 보듯이 **세 가지 변수설정 타입은 모두 다른 과정을 통해 변수를 생성**합니다.\r\n\r\n```javascript\r\n// 1. var\r\nconsole.log(name) // undefined\r\nvar name=\"홍길동\"\r\n\r\n// 2. let \r\nconsole.log(name) // Error: 레퍼런스 에러\r\nlet name=\"홍길동\"\r\n\r\n// 3. const\r\nconsole.log(name) // Error\r\nconst name=\"홍길동\"\r\n\r\n// 4. const 추가\r\nconst name;\r\nname=\"홍길동\"\r\n```\r\n\r\n- var의 경우 아직 할당되지 않은 name을 먼저 호출하더라도 호이스팅된 변수명 name은 이미 알고 있으며 다만 해당 값은 undefined상태이다. 따라서 에러가 나지 않는다.\r\n\r\n- let의 경우 호이스팅은 되므로 name변수를 아예 모르는 것은 아니나, 초기화(name에 undefined)가 되지않았으므로 name에 해당하는 레퍼런스가 없어 레퍼런스 에러가 난다.\r\n- const의 경우 선언/초기화/할당 세 가지가 모두 한 번에 이뤄져야 하는데 그렇지 않았으므로 에러가 발생한다.\r\n- const의 경우 선언과 동시에 할당까지 이뤄져야 한다. 따라서 4번처럼 생성만 해두고 나중에 할당하면 오류가 발생한다.\r\n\r\n\r\n\r\n## 스코프\r\n\r\n| var                                                          | let, const                                             |\r\n| ------------------------------------------------------------ | ------------------------------------------------------ |\r\n| 함수 스코프                                                  | 블록 스코프                                            |\r\n| function() 단위                                              | if, while, for, try/catch문 등                         |\r\n| -> if문이나 while문 등 블록스코프 내에서 선언되어도 함수단위에서 호출이 가능함. <br />단, 함수단위를 넘어서는 곳에서의 호출은 안된다. | if문이나 while문등 선언된 블록 내에서만 호출이 가능함. |\r\n\r\n\r\n\r\n\r\n---\r\nRef.\r\n\r\n[유튜브 코딩앙마 채널](https://www.youtube.com/watch?v=ocGc-AmWSnQ&list=PLZKTXPmaJk8JZ2NAC538UzhY_UNqMdZB4)\r\n\r\n");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29udGVudHMvYmxvZy9sYW5ndWFnZS9qYXZhc2NyaXB0LzIwMjEtMDgtMDkt7J6Q67CU7Iqk7YGs66a97Yq4LXZhci1sZXQtY29uc3Qt7KeE7KecLeywqOydtOygkC3qtazrs4TtlZjquLAubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLCtEQUFlLGt4Q0FBa3hDLHFwQ0FBcXBDLEUiLCJmaWxlIjoic3RhdGljL3dlYnBhY2svcGFnZXMvX2FwcC42N2M2NjVhNTFjZjgyZTc4MTY1YS5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCItLS1cXHJcXG50aXRsZTogXFxcIuyekOuwlOyKpO2BrOumve2KuCDrs4DsiJgtdmFyLCBsZXQsIGNvbnN0IOq8rSDslYzslYTslbztlaAg7LCo7J207KCQXFxcIlxcclxcbmRhdGU6IFxcXCIyMDIxLjA4LjA5XFxcIlxcclxcbnRhZ3M6IFxcclxcbiAgLSBqYXZhc2NyaXB0XFxyXFxuICAtIEpT67OA7IiYKHZhciwgbGV0LCBjb25zdClcXHJcXG4tLS1cXHJcXG5cXHJcXG4jIOyekOuwlOyKpO2BrOumve2KuCDrs4DsiJggdmFyLCBsZXQsIGNvbnN0IOu5hOq1kFxcclxcblxcclxcbuycoO2KnOu4jCBg7L2U65Sp7JWZ66eIIOyxhOuEkGDsnZgg7J6Q67CU7Iqk7YGs66a97Yq4IOykkeq4iSAx7Y64IHZhciwgbGV0LCBjb25zdOulvCDrs7Tri6TqsIAg7KKL7J2AIOuCtOyaqeydtCDsnojslrQg7KCV66as7ZWp64uI64ukLlxcclxcblxcclxcblxcclxcblxcclxcbiMjIO2YuOydtOyKpO2MhSBcXHJcXG5cXHJcXG7shKDslrjtlZjquLAg7KCE7JeQIO2YuOy2nOuQnCB2YXLrs4DsiJjqsIAg7Jik66WY6rCAIOuCmOyngCDslYrripTri6TripQg6rKD7J2EIOqxsOydmCDrqqjrk6Ag7ZSE66Gg7Yq47JeU65OcIOqwnOuwnOyekOudvOuptCDslYzqs6Ag7J6I7J2EIOqyg+yeheuLiOuLpC4g6re4IOydtOycoOuKlCDrsJTroZwgaG9pc3Rpbmcg65WM66y47J24642wLCBFUzYg7J207ZuEIOuCmOyYqCBsZXTsnbTrgpggY29uc3Qg66GcIOuzgOyImOulvCDshKDslrjtlZjripQg6rKD7J2AIHZhcuyZgCDri6zrpqwg7J206rKD7J20IOuQmOyngCDslYrripTri6QuIOq3uOugh+uLpOuptCBsZXTsnYAg7Zi47J207Iqk7YyFIOuQmOyngCDslYrripQg6rKD7J286rmMP+udvOuKlCDsnZjrrLjsnbQg65Ok7JeI7Iq164uI64ukLlxcclxcblxcclxcblxcclxcblxcclxcbiMjIyDwn5KhIGxldOuPhCBob2lzdGluZ+uQnOuLpC5cXHJcXG5cXHJcXG48dT7qsrDroaDrtoDthLAg66eQ7ZWY7J6Q66m0IGxldOuPhCDtmLjsnbTsiqTtjIUg65Cp64uI64ukPC91Pi4g7ZWY7KeA66eMIHZhcuyymOufvCDrj5nsnpHtlZjsp4Ag7JWK64qUIOydtOycoOuKlCBg67OA7IiY7J2YIOyDneyEseuLqOqzhCAz6rCA7KeAIGAgKipcXFwi7ISg7Ja4XFxcIi1cXFwi7LSI6riw7ZmUXFxcIi1cXFwi7ZWg64u5XFxcIioqIOydmCDsp4Ttlonqs7zsoJXsnbQg64uk66W06riwIOuVjOusuOydtOuLpC5cXHJcXG5cXHJcXG58IHZhciAgICAgICAgICAgICAgICAgfCBsZXQgICAgICAgfCBjb25zdCAgICAgICAgICAgICAgICAgICAgICAgICB8XFxyXFxufCAtLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxcclxcbnwgMS4g7ISg7Ja4ICsgMi4g7LSI6riw7ZmUIHwgMS4g7ISg7Ja4ICAgfCAxLiDshKDslrggKyAyLiDstIjquLDtmZQgKyAzLiDtlaDri7kgfFxcclxcbnwgLSAgICAgICAgICAgICAgICAgICB8IDIuIOy0iOq4sO2ZlCB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcXHJcXG58IDMuIO2VoOuLuSAgICAgICAgICAgICB8IDMuIO2VoOuLuSAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxcclxcblxcclxcbuychCDtkZzsl5DshJwg67O065Ov7J20ICoq7IS4IOqwgOyngCDrs4DsiJjshKTsoJUg7YOA7J6F7J2AIOuqqOuRkCDri6Trpbgg6rO87KCV7J2EIO2Gte2VtCDrs4DsiJjrpbwg7IOd7ISxKirtlanri4jri6QuXFxyXFxuXFxyXFxuYGBgamF2YXNjcmlwdFxcclxcbi8vIDEuIHZhclxcclxcbmNvbnNvbGUubG9nKG5hbWUpIC8vIHVuZGVmaW5lZFxcclxcbnZhciBuYW1lPVxcXCLtmY3quLjrj5lcXFwiXFxyXFxuXFxyXFxuLy8gMi4gbGV0IFxcclxcbmNvbnNvbGUubG9nKG5hbWUpIC8vIEVycm9yOiDroIjtjbzrn7DsiqQg7JeQ65+sXFxyXFxubGV0IG5hbWU9XFxcIu2Zjeq4uOuPmVxcXCJcXHJcXG5cXHJcXG4vLyAzLiBjb25zdFxcclxcbmNvbnNvbGUubG9nKG5hbWUpIC8vIEVycm9yXFxyXFxuY29uc3QgbmFtZT1cXFwi7ZmN6ri464+ZXFxcIlxcclxcblxcclxcbi8vIDQuIGNvbnN0IOy2lOqwgFxcclxcbmNvbnN0IG5hbWU7XFxyXFxubmFtZT1cXFwi7ZmN6ri464+ZXFxcIlxcclxcbmBgYFxcclxcblxcclxcbi0gdmFy7J2YIOqyveyasCDslYTsp4Eg7ZWg64u565CY7KeAIOyViuydgCBuYW1l7J2EIOuovOyggCDtmLjstpztlZjrjZTrnbzrj4Qg7Zi47J207Iqk7YyF65CcIOuzgOyImOuqhSBuYW1l7J2AIOydtOuvuCDslYzqs6Ag7J6I7Jy866mwIOuLpOunjCDtlbTri7kg6rCS7J2AIHVuZGVmaW5lZOyDge2DnOydtOuLpC4g65Sw65287IScIOyXkOufrOqwgCDrgpjsp4Ag7JWK64qU64ukLlxcclxcblxcclxcbi0gbGV07J2YIOqyveyasCDtmLjsnbTsiqTtjIXsnYAg65CY66+A66GcIG5hbWXrs4DsiJjrpbwg7JWE7JiIIOuqqOultOuKlCDqsoPsnYAg7JWE64uI64KYLCDstIjquLDtmZQobmFtZeyXkCB1bmRlZmluZWQp6rCAIOuQmOyngOyViuyVmOycvOuvgOuhnCBuYW1l7JeQIO2VtOuLue2VmOuKlCDroIjtjbzrn7DsiqTqsIAg7JeG7Ja0IOugiO2NvOufsOyKpCDsl5Drn6zqsIAg64Kc64ukLlxcclxcbi0gY29uc3TsnZgg6rK97JqwIOyEoOyWuC/stIjquLDtmZQv7ZWg64u5IOyEuCDqsIDsp4DqsIAg66qo65GQIO2VnCDrsojsl5Ag7J2066SE7KC47JW8IO2VmOuKlOuNsCDqt7jroIfsp4Ag7JWK7JWY7Jy866+A66GcIOyXkOufrOqwgCDrsJzsg53tlZzri6QuXFxyXFxuLSBjb25zdOydmCDqsr3smrAg7ISg7Ja46rO8IOuPmeyLnOyXkCDtlaDri7nquYzsp4Ag7J2066SE7KC47JW8IO2VnOuLpC4g65Sw65287IScIDTrsojsspjrn7wg7IOd7ISx66eMIO2VtOuRkOqzoCDrgpjspJHsl5Ag7ZWg64u57ZWY66m0IOyYpOulmOqwgCDrsJzsg53tlZzri6QuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuIyMg7Iqk7L2U7ZSEXFxyXFxuXFxyXFxufCB2YXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBsZXQsIGNvbnN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxcclxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcXHJcXG58IO2VqOyImCDsiqTsvZTtlIQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwg67iU66GdIOyKpOy9lO2UhCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxcclxcbnwgZnVuY3Rpb24oKSDri6jsnIQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpZiwgd2hpbGUsIGZvciwgdHJ5L2NhdGNo66y4IOuTsSAgICAgICAgICAgICAgICAgICAgICAgICB8XFxyXFxufCAtPiBpZuusuOydtOuCmCB3aGlsZeusuCDrk7Eg67iU66Gd7Iqk7L2U7ZSEIOuCtOyXkOyEnCDshKDslrjrkJjslrTrj4Qg7ZWo7IiY64uo7JyE7JeQ7IScIO2YuOy2nOydtCDqsIDriqXtlaguIDxiciAvPuuLqCwg7ZWo7IiY64uo7JyE66W8IOuEmOyWtOyEnOuKlCDqs7Psl5DshJzsnZgg7Zi47Lac7J2AIOyViOuQnOuLpC4gfCBpZuusuOydtOuCmCB3aGlsZeusuOuTsSDshKDslrjrkJwg67iU66GdIOuCtOyXkOyEnOunjCDtmLjstpzsnbQg6rCA64ql7ZWoLiB8XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLS0tXFxyXFxuUmVmLlxcclxcblxcclxcblvsnKDtipzruIwg7L2U65Sp7JWZ66eIIOyxhOuEkF0oaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vY0djLUFtV1NuUSZsaXN0PVBMWktUWFBtYUprOEpaMk5BQzUzOFV6aFlfVU5xTWRaQjQpXFxyXFxuXFxyXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==