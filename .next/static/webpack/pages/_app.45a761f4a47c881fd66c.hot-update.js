self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/language/javascript/2021-03-31-Javascript-자주쓰는-내장-함수-복습하기.md":
/*!************************************************************************************!*\
  !*** ./contents/blog/language/javascript/2021-03-31-Javascript-자주쓰는-내장-함수-복습하기.md ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"Javascript 자주쓰는 내장 함수 복습하기\"\r\ndate: \"2021.03.31\"\r\ntags: \r\n  - javascript\r\n  - es6\r\n---\r\n\r\n\r\n\r\n# 자주쓰는 JS 내장함수 :map, find, findIndex, filter, indexOf, splice, slice, shift & pop, join, reduce\r\n\r\n## 1. map\r\n\r\nmap은 배열 안의 각 원소를 변환 할 때 사용 되며, 이 과정에서 새로운 배열이 만들어집니다. 배열.map()\r\n\r\n```jsx\r\nconst array = [1, 2, 3, 4, 5, 6, 7, 8];\r\nconst square = n => n**2\r\nconst squared = array.map(square)\r\nconsole.log(squared)\r\n\r\n// [1,  4,  9, 16, 25, 36, 49, 64]\r\n```\r\n\r\n- map안에 들어가는 square같은 함수를 `변화함수`라고 한다.\r\n- 변화함수를 쓰지 않고 바로 해도 된다\r\n\r\n```jsx\r\nconst array = [1, 2, 3, 4, 5, 6, 7, 8];\r\nconst squared = array.map(n => n**2)\r\nconsole.log(squared)\r\n// 결과는 같다. [1,  4,  9, 16, 25, 36, 49, 64]\r\n```\r\n\r\n## 2. indexOf\r\n\r\nindexOf 는 원하는 항목이 배열 내 몇번째 원소인지 찾아주는 함수입니다.\r\n\r\n```jsx\r\nconst superheroes = ['아이언맨', '캡틴 아메리카', '토르', '닥터 스트레인지']\r\nconst index = superheroes.indexOf('토르')\r\nconsole.log(index)\r\n// 2\r\n```\r\n\r\n## 3. findIndex - 찾아낸 값의 index를 반환\r\n\r\n배열 안에 있는 값이 객체이거나, 배열이라면 indexOf 로 찾을 수 없습니다. 이럴 때 findIndex를 사용합니다.\r\n\r\n```jsx\r\n// todos에서 id가 3인 객체가 몇 번째 인지 찾기\r\n\r\nconst todos = [\r\n  {\r\n    id: 1,\r\n    text: '자바스크립트 입문',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '함수 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '객체와 배열 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '배열 내장함수 배우기',\r\n    done: false\r\n  }\r\n];\r\n\r\nconst index = todos.findIndex(todo => todo.id === 3);\r\nconsole.log(index);\r\n\r\n// 2\r\n```\r\n\r\n## 4. find - 찾아낸 값 자체를 반환\r\n\r\n```jsx\r\nconst todos = [\r\n  {\r\n    id: 1,\r\n    text: '자바스크립트 입문',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '함수 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '객체와 배열 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '배열 내장함수 배우기',\r\n    done: false\r\n  }\r\n];\r\n\r\nconst todo = todos.find(todo => todo.id === 3);\r\nconsole.log(todo);\r\n\r\n// {id: 3, text: \"객체와 배열 배우기\", done: true}\r\n```\r\n\r\n## 5. filter\r\n\r\n특정 조건을 만족하는 값들만 따로 추출하여 새로운 배열을 만듭니다.\r\n\r\n```jsx\r\nconst todos = [\r\n  {\r\n    id: 1,\r\n    text: '자바스크립트 입문',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '함수 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '객체와 배열 배우기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '배열 내장함수 배우기',\r\n    done: false\r\n  }\r\n];\r\n\r\nconst tasksNotDone = todos.filter(todo => todo.done === false);\r\nconsole.log(tasksNotDone);\r\n/* \r\ntodo.done이 false인 {id: 4, text: '배열 내장함수 배우기', done: false} \r\n객체만 새로운 배열(taskNotDone) 안에 들어간다.\r\n[ { id: 4, text: '배열 내장함수 배우기', done: false } ]\r\n\r\n*/\r\n\r\n//  이렇게 표현할 수도 있다.\r\nconst tasksNotDone = todos.filter(todo => !todo.done);\r\n```\r\n\r\n## 6. splice\r\n\r\n배열에서 특정 항목을 제거할 때 사용된다. 인덱스 값으로 지우는 것이기 때문에 인덱스를 먼저 구하고 해당 인덱스로부터 몇 개나 지울 것인지 선택하여 여러값을 한 번에 지울 수 있다.\r\n\r\n```jsx\r\nconst numbers = [10, 20, 30, 40];\r\nconst index = numbers.indexOf(30);\r\nnumbers.splice(index, 1);\r\nconsole.log(numbers);\r\n\r\n// 30의 index = 2이고 2번째 인덱스로부터 한 개의 값을 지우므로 30만 지워진다.\r\n// [10, 20, 40]\r\n```\r\n\r\n## 7. slice\r\n\r\n기존 배열에 변화를 일으키지 않고 슬라이싱 하여 새로운 배열을 생성한다.\r\n\r\n```jsx\r\nconst numbers = [10, 20, 30, 40];\r\nconst sliced = numbers.slice(0, 2); // 0부터 시작해서 2전까지\r\n\r\nconsole.log(sliced); // [10, 20]\r\nconsole.log(numbers); // [10, 20, 30, 40]\r\n```\r\n\r\n## 8. shift & pop\r\n\r\nshift는 배열의 첫 번째 값을 뽑아내고, pop은 맨 뒤의 값을 뽑아낸다. python과 비교하면 shift = pop(0), pop은 똑같다.\r\n\r\n```jsx\r\nconst numbers = [10, 20, 30, 40];\r\nconst value = numbers.shift();\r\nconsole.log(value); // 10\r\nconst value2 = numbers.pop();\r\nconsole.log(value2); // 40\r\nconsole.log(numbers); //[20, 30]\r\n```\r\n\r\n## 9. join\r\n\r\n배열 안의 값들을 문자열 형태로 합쳐줍니다.\r\n\r\n```jsx\r\nconst array = [1, 2, 3, 4, 5];\r\nconsole.log(array.join()); // 1,2,3,4,5\r\nconsole.log(array.join(' ')); // 1 2 3 4 5\r\nconsole.log(array.join(', ')); // 1, 2, 3, 4, 5\r\n```\r\n\r\n## 10. reduce\r\n\r\n배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다. 앞의 문장만 읽어서는 이해하기 어려운데, 내가 지정해준 함수를 실행 후 나온 결과값을 다시 파라미터로 사용하도록 합니다. 아래 예를 통해 이해해봅시다.\r\n\r\n```jsx\r\n// 기존 방식\r\nconst numbers = [1, 2, 3, 4, 5];\r\n\r\nlet sum = 0;\r\nnumbers.forEach(n => {\r\n  sum += n;\r\n});\r\nconsole.log(sum);  //15\r\n\r\n//reduce를 사용하는 방식\r\nconst numbers = [1, 2, 3, 4, 5];\r\nlet sum = array.reduce((accumulator, current) => accumulator + current, 0);\r\n\r\nconsole.log(sum);  //15\r\nconst numbers = [1, 2, 3, 4, 5];\r\nlet sum = numbers.reduce((accumulator, current) => {\r\n  console.log({ accumulator, current });\r\n  return accumulator + current;\r\n}, 0);\r\n\r\nconsole.log(sum);\r\n\r\n// 결과\r\n{ accumulator: 0, current: 1 }\r\n{ accumulator: 1, current: 2 }\r\n{ accumulator: 3, current: 3 }\r\n{ accumulator: 6, current: 4 }\r\n{ accumulator: 10, current: 5 }\r\n15\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n**references**\r\n\r\n[LearnJS GitBook](https://learnjs.vlpt.us/basics/09-array-functions.html)");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,