self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/language/javascript/2021-08-04-자바스크립트-프로처럼-쓰기.md":
/*!************************************************************************!*\
  !*** ./contents/blog/language/javascript/2021-08-04-자바스크립트-프로처럼-쓰기.md ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"자바스크립트 프로와 나의 차이는...?\"\r\ndate: \"2021.08.05\"\r\ntags: \r\n    - javascript\r\n---\r\n\r\n\r\n# 자바스크립트를 프로처럼 세련되게 쓰는 법\r\n유튜브 드림코딩 엘리 영상을 보다 좋은 내용이 있어 정리하여 공유합니다.\r\n\r\n[TOC]\r\n\r\n\r\n## 조건문에서 조건이 두 개라면 과감하게 삼항연산자 사용\r\n\r\n```javascript\r\n// not good...\r\nfunction (score) {\r\n\tif (score > 5) {\r\n        result = 'thumbup'\r\n    } else if {\r\n        result = 'thumbdown'\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n// Better !!\r\nfunction (score) {\r\n\treturn score > 5 ? 'thumbup': 'thumbdown';\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n## Nullish Coalescing operator를 사용해보자\r\n\r\n```javascript\r\n// not good...\r\nfunction printMessage(text) {\r\n    let message = text;\r\n    if (text == null || text == undefined) {\r\n        message = 'Nothing to display';\r\n    }\r\n    console.log(message);\r\n}\r\n\r\n\r\n// Better !\r\nfunction printMessage(text) {\r\n    const message = text ?? 'Nothing to Display';\r\n    console.log(message);\r\n}\r\n\r\n```\r\n\r\n- 위 코드와 아래 코드는 동일하게 동작한다.\r\n- text가 null or undefined이면 'Nothing to Display'를 할당하는 코드인데, 위 코드는 message를 일단 받고, null/undefined check 후 message에 할당한다.\r\n- 하지만 아래 코드 같은 경우 text를 바로 체크하여 message에 선언과 할당이 동시에 가능하기 때문에 message를 const로 선언할 수 있고 가독성도 좋다.\r\n\r\n\r\n\r\n### Logical Operator OR<||>와 Nullish Coalescing Operator의 차이\r\n\r\n**OR**\r\n\r\n- Left: falsy 하면 오른쪽이 true\r\n\r\n**Nullish Coalescing (??)**\r\n\r\n- Left: null, undefiend 이면 오른쪽이 true\r\n\r\n\r\n\r\nnull & undefined는 모두 falsy에 포함된다. 이외에도 0, -0, NaN, 빈문자열('') 등도 모두 falsy에 포함된다. 다시 말해 falsy가 좀 더 광범위한 범위를 포괄한다.\r\n\r\n**따라서 두 연산자가 비슷해보이지만 조금 다른 결과를 초래할 수 있으므로 차이를 정확하게 이해하고 사용하는 것이 중요하다!**\r\n\r\n\r\n\r\n## Object Destructuring으로 변수 할당/선언하기\r\n\r\n```javascript\r\n// Not good...\r\nfunction displayPerson(person) {\r\n    const name = person.name;\r\n    const age = person.age;\r\n    displayAvatar(name);\r\n    displayName(name);\r\n    displayProfile(name, age);\r\n}\r\n\r\n// Better !!\r\nfunction displayPerson(person) {\r\n    const { name, age } = person;\r\n    displayAvatar(name);\r\n    displayName(name);\r\n    displayProfile(name, age);\r\n}\r\n```\r\n\r\n\r\n\r\n## Object 결합은 Object.assign 혹은 Spread Syntax를 사용하자\r\n\r\n```javascript\r\n// Not Good...\r\nconst item = {\r\n    ...\r\n}\r\nconst detail = {\r\n\t...    \r\n}\r\n\r\nconst newObject = {\r\n    type: item.type,\r\n    size: item.size,\r\n    price: detail.price,\r\n    made: detail.made,\r\n    gender: detail.gender\r\n}\r\n\r\n\r\n// Better !!\r\n // 1. Object.assign\r\nconst newObj = Object.assign(item, detail);\r\n\r\n // 2. Spread Syntax\r\nconst newObj2 = {...item, ...detail};\r\n```\r\n\r\n\r\n\r\n## Optional Chaining\r\n\r\n```javascript\r\n// Not good...\r\nfunction displayJobTitle(person) {\r\n    if (person.job && person.job.title) {\r\n        console.log(person.job.title);\r\n    }\r\n}\r\n\r\n// Better !!\r\nfunction displayJobTitle(person) {\r\n \tif (person.job?.title){\r\n        console.log(person.job.title)\r\n\t}   \r\n}\r\n\r\n// Optional Chaining + Nullish Coalescing\r\nfunction displayJobTitle(person) {\r\n \tconst title = person.job?.title ?? 'No Job yet'\r\n\tconsole.log(title)\r\n}\r\n```\r\n\r\n- 이 내용은 오늘 낮에도 내가 Not Good으로 코드를 짰던 내용이었어서 더욱 공감하며 들었던 내용입니다.\r\n- person에 job이 있을 수도 있고, 없을 수도 있는 경우 일단 person.job을 먼저 체킹하고 person.job.title을 체킹하는 코드입니다. 이게 일반적으로 정말 많이 사용됩니다. 특히 typescript와 함께 쓰이면 job이나 job.title이 null or undefined 될 수 있어서 이 내용에 타입을 미리 설정해주는 것이 생각보다 고역입니다.\r\n- ?를 통해서 person.job이 있는지 없는지를 동시에 처리할 수 있게 됩니다.\r\n\r\n- 가장 아래에는 optional chaining과 Nullsih Coalescing을 한 번에 사용하는 경우입니다. person.job이 있는지 체크하고 person.job.title이 있는지까지 한 번에 체크해서 없는 경우에 'No job yet'을 출력할 수 있습니다.\r\n\r\n\r\n\r\n## Array 관련 연산은 map, filter, reduce를 적극 활용하자!\r\n\r\nJavascript의 배열 methods (map, filter, reduce)들은 정말 강력합니다. \r\n\r\n전통적인 for loop보다는 이 친구들을 적극적으로 활용하면 언어의 특징을 잘 이해하고 사용하는 프로다운 면모를 보여줄 수 있습니다.\r\n\r\n```javascript\r\n// Not good...\r\nconst arr = [1,2,3,4,5]\r\n\t// 짝수 구하기\r\nconst even = [];\r\nfor (let i = 0 ; i <items.length; i++) {\r\n    if (items[i] % 2 === 0) {\r\n        even.push(items[i]);\r\n    }\r\n}\r\n\r\n// Better !!\r\nconst even = arr.filter(item => item % 2 == 0)\r\n\r\n```\r\n\r\n- 코딩테스트를 주로 python을 기반으로 준비했었는데 프론트엔드 개발자로 취업을 하다보면 Javascript 단일 언어로 코테를 많이 제공합니다. 이때 초반에는 저도 위와 같은 코드를 자연스럽게 썼었는데.... 하.... 이제와서 돌이켜 생각해보니까 이게 문제가 풀린다고 해도 제가 면접관이라면 위와 같이 javascript를 쓰는 개발자와 같이 일하는게 꺼려질 것 같다는 생각이 드네요 ㅎㅎ\r\n\r\n\r\n\r\n---\r\n\r\nRef.\r\n\r\n[드림코딩엘리](https://www.youtube.com/watch?v=BUAhpB3FmS4&t=2s)\r\n");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,