self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/react/2022-10-07-리액트-콘솔창-에러-그대로-놔두고-계신가요.md":
/*!*******************************************************************!*\
  !*** ./contents/blog/react/2022-10-07-리액트-콘솔창-에러-그대로-놔두고-계신가요.md ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\ntitle: \"리액트 콘솔창 에러 그대로 놔두고 계신가요?\"\ndate: \"2022.10.07\"\ntags:\n  - react\n  - 콘솔\n  - 에러\n---\n\n\n\n# 리액트 console warning, error 제거하기\n\n평소 개발할 때 마다 켜는 크롬개발자도구의 콘솔창에는 수 많은 에러와 경고 메시지가 뜨고 있었습니다. 개발자를 도와주는 고마운 메시지들이지만 사실 볼 때 마다 좀 꼴뵈기 싫었다고(?) 표현하는게 가장 저의 정확한 심정이었습니다. 짬이 좀 나면 검도 9단이 대나무 썰듯이 썰어보겠다고 다짐만 했었다가 드디어 기다리던 기회가 와서(짬이 나서;) 한 번 처리해봤습니다.\n\n![에러 메시지를 썰기 전 나의 상상 속 내 모습 ;](https://cdn-ak.f.st-hatena.com/images/fotolife/g/gaou2/20170611/20170611020308.gif)\n\n에러 메시지를 썰기 전 나의 상상 속 내 모습 ;\n\n## 현상황\n\n![BUILDIT-error](/assets/img/BUILDIT-error.png)\n\n![BUILDIT-error1](/assets/img/BUILDIT-error1.png)\n\n## Error 해결\n\n### 1. MuiThemeProvider\n\n```tsx\n// Error log\n\nWarning: Failed prop type: The prop `theme` is marked as required in `MuiThemeProviderOld`, but its value is `undefined`.\n```\n\n```tsx\nconst jss = create(jssPreset());\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // JssProvider allows customizing the JSS styling solution.\n    return (\n      <JssProvider jss={jss} >\n        {/* MuiThemeProvider makes the theme available down the React tree\n          thanks to React context. */}\n        <MuiThemeProvider>\n          {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n          <CssBaseline />\n          <Component {...props} />\n        </MuiThemeProvider>\n      </JssProvider>\n    );\n  }\n\n  return WithRoot;\n}\n```\n\n```\nconst jss = create(jssPreset());\nconst theme = createMuiTheme({})\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // JssProvider allows customizing the JSS styling solution.\n    return (\n      <JssProvider jss={jss} >\n        {/* MuiThemeProvider makes the theme available down the React tree\n          thanks to React context. */}\n        <MuiThemeProvider theme={theme}>\n          {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n          <CssBaseline />\n          <Component {...props} />\n        </MuiThemeProvider>\n      </JssProvider>\n    );\n  }\n\n  return WithRoot;\n}\n```\n\n- MuiThemeProvider 에 theme 속성을 undefined로 주고 있기 때문에 발생한 에러였습니다.\n- theme에 createMuiTheme 메소드를 통해 만든 객체를 넣어줘서 해결했습니다.\n\n## 2. MuiInputLabel\n\n```tsx\n// Error log\n\nWarning: Material-UI: the `MuiInputlabel` component increases the css specificity of the `focused` internal state. you can not override it like this ...\n```\n\n```tsx\nconst darkTheme = createMuiTheme({\n  overrides: {\n\t\t...\n    MuiInputLabel: {\n      root: {\n        color: \"#ccc\",\n        fontSize: \"12px\",\n        marginTop: -3,\n      },\n      focused: {\n        display: \"none\",\n      },\n      shrink: {\n        display: \"none\",\n      },\n    },\n    MuiInput: {\n      underline: {\n        \"&:hover\": {\n          \":&before\": {\n            borderBottom: \"1px solid #ccc\",\n          },\n          margin: \"0 !important\",\n          borderBottom: \"1px solid #ccc\",\n        },\n        \"&:after\": {\n          borderBottom: \"1px solid #ccc\",\n        },\n      },\n    },\n  },\n});\n```\n\n- 불필요한 override theme 객체를 삭제하여 해결했습니다.\n\n### 3. Warning: Received `false` for a non-boolean attribute `display`.\n\n> 이 warning은 styled component에서 자주 발생하는 오류이다. html,css element 속성 중에서 non-boolean attributes에 boolean속성을 넘겨줘서 발생하는 오류인데, 예를 들면 img 태그의 src에 string타입이 와야 맞지만 boolean이나 숫자를 넣는 경우 발생할 수 있다.\n> 현재 타이틀 메시지는 boolean값이 아닌 display에 true/false 등의 boolean을 넣었다고 해서 에러메시지를 뿜고 있는 것이다. \n> 참고.\n> [https://mygumi.tistory.com/382](https://mygumi.tistory.com/382)\n\nIf you used to conditionally omit it with display={condition && value}, pass display={condition ? value : undefined} instead.\n\n→ display를 조건부로 변경하고 싶다면 && 연산자를 사용하기보다는 삼항연산자를 사용할 것을 권장하고 있다.\n\n하지만 모든 styled컴포넌트의 display를 살펴봤는데 모든 곳에서 display 속성에 삼항연산자로 제대로 설정이 되어있었습니다.\n\n![뭐지? 트릭인가?](https://d3kxs6kpbh59hp.cloudfront.net/community/COMMUNITY/598060f2ac1843b1ba8979f4ed292de2/abd9f49cdf72485a8d5cb892bce85937_1617101551.jpg)\n\n뭐지? 트릭인가?\n\n문제 원인은 Banner 컴포넌트의 display 속성 이었습니다. 삼항연산자가 해결의 키는 아니었던 것이죠.\n\n```tsx\n<Banner\n  onClose={() => {\n    this.setState({ showBanner: false });\n    localStorage.setItem('showBanner', 'false');\n  }}\n  display={this.state.showBanner!}\n  href=\"/myPage/information\"\n  buttonContent=\"결제 수단 변경하기\"\n  icon={<ErrorOutline />}\n  content={`정기구독 자동결제가 실패했습니다. 결제 수단을 변경 부탁드립니다! \n  결제수단 변경 전까지 새 프로젝트를 시작할 수 없으며 ${moment(App.session.plan_finished_at).add(8, 'days').format('YYYY-MM-DD')} 23:59:59 까지 실패 시 자동으로 플랜이 해지됩니다.`} />\n```\n\n- 위 배너 컴포넌트는 showBanner state값에 따라서 display를 하느냐 마느냐가 결정됩니다.\n- 아마도 이 컴포넌트를 짜신 분께서 해당 props에 따라서 css의 display속성을 변경하므로 그대로 display attributes를 사용하셨던 것 같습니다. 하지만 display라는 동일한 이름의 attributes가 있어서 이 부분에서 에러를 발생시키는 문제가 있었습니다. display는 불리언 타입이 아니기 때문이죠.\n- 이 코드를 display={~} ⇒ show={~}로 attributes의 이름을 변경해주어 해결했습니다. (적으면서 다시 생각해보니 isShow로 이름을 지을걸 하는 후회가 살짝 되네요)\n\n### 4. each child in a list should have a unique key prop\n\n이 에러는 리액트에서 상당히 자주 나오는 에러로 map 반복문으로 render할 경우 해당 element에 고유한 key값을 넣어달라는 뜻이니 넣어주어 해결할 수 있습니다.\n\n### 5. index.js:1420 Warning: BuilditInput contains an input of type text with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props.\n\nhtml `input` 태그의 defaultValue는 string | string[] | undefined 타입입니다. 하지만 defaultValue가 props로 내려오지 않는 경우 “”로 빈 스트링을 넣도록 하였는데 이 경우에는 오히려 undefined로 선언하는 것이 더 적절합니다. 따라서 undefined로 수정하여 해결했습니다.\n\n![BUILDIT-error2](/assets/img/BUILDIT-error2.png)\n\n- “” 대신 undefined로 타입스크립트 타입 오류를 제거하였습니다.\n\n### 6. **Warning: React does not recognize the XXX prop on a DOM element**\n\n![BUILDIT-error3](/assets/img/BUILDIT-error3.png)\n\n> 참고: \n> **[How to solve Warning: React does not recognize the X prop on a DOM element](https://stackoverflow.com/questions/54468535/how-to-solve-warning-react-does-not-recognize-the-x-prop-on-a-dom-element)** \n> [https://ko.reactjs.org/warnings/unknown-prop.html](https://ko.reactjs.org/warnings/unknown-prop.html)\n\n올바른 DOM 어트리뷰트/프로퍼티로 인식되지 않는 DOM 엘리먼트를 렌더링하려고 하면 unknown-prop 경고가 발생합니다. DOM 엘리먼트에 잘못된 props가 추가되지 않도록 해야 합니다. 하지만 borderRadius, justifyContent와 같은 코드가 있으면 리액트에서 이런 에러를 내뱉습니다. 따라서 다음과 같이 (borderradius, justifycontent) 소문자로 변경해주면 해결할 수 있습니다.\n\n## Warning 해결\n\n### 1. componentWillReceiveProps, componentWillmount 라이프사이클 변경하기\n\n```tsx\nWarning: componentWillMount has been renamed, and is not recommended for use.\n\nWarning: componentWillReceiveProps has been renamed, and is not recommended for use\n```\n\n- 이전에도 봤던 경고 메시지입니다. componentWillmount, componentWillRecieveProps같은 라이프사이클은 다음버전의 리액트에서는 더 이상 쓰이지 않으니 변경해달라는 내용입니다.\n\n- `npx react-codemod rename-unsafe-lifecycles` 명령어로 모두 UNSAFE_ prefix를 앞에 달아줬습니다. 하지만 안타깝게 그럼에도 불구하고 이 메시지가 계속 뜨고 있습니다.\n\n- [https://stackoverflow.com/questions/58769752/componentwillmount-warnings-visible-even-though-componentwillmount-is-not-ex](https://stackoverflow.com/questions/58769752/componentwillmount-warnings-visible-even-though-componentwillmount-is-not-ex)\n\n  - 여기 답변을 살펴보면 You're getting this warning because `componentWillMount`\n    is deprecated in newer React versions. If you're not using `componentWillMount`\n     anywhere then one of your libraries is and it needs to be updated.\n\n     즉, 프로젝트 내부 코드가 아닌 다른 라이브러리의 예전 버전에서 이 hook들을 사용하고 있기 때문에 발생하는 메시지라는 내용이네요. 그래서 해당 라이브러리의 버전을 같이 올려서 해결할 수 있다고 합니다.\n\n     어떤 라이브러리인지도 모르고, 해당 라이브러리 버전을 올렸다가 충돌이 날 수도 있어 이 warning 메시지는 그대로 두는게 좋겠습니다.\n\n### 2. react.development.js:217 Warning: React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.\n\n- 이 에러메시지도 위의 1번과 비슷한 현상때문에 발생하는 것으로 파악됩니다. 현 코드에서 React.createFactory() 라는 코드를 사용하는 곳이 없는데 이 기능이 곧 사라지니까 바꾸라는 걸로 봐서는 라이브러리 내에서 활용하고 있는 것으로 볼 수 있겠습니다.\n\n### 3. maps.js?ncpClientId=nhthwdjbzm&submodules=geocoder,drawing,stylemap:15 A parser-blocking, cross site (i.e. different eTLD+1) script, [https://openapi.map.naver.com/openapi/v3/maps-geocoder.js](https://openapi.map.naver.com/openapi/v3/maps-geocoder.js), is invoked via document.write. The network request for this script MAY be blocked by the browser in this or a future page load due to poor network connectivity. If blocked in this page load, it will be confirmed in a subsequent console message. See [https://www.chromestatus.com/feature/5718547946799104](https://www.chromestatus.com/feature/5718547946799104) for more details.\n\n- 이 이슈는 네이버 뿐만 아니라 카카오 지도 로드 시에도 발생하는 문제인 것 같은데, 용량이 큰 라이브러리를 로드할 때 그 라이브러리 내에 document.write이 들어있으면 나머지 html parsing이나 JS를 block하여 흰화면이 오래 나올 수 있습니다. 이러면 사용자는 오류라고 느낄 수 있는데요 특히나 느린 네트워크 환경에서는 정도가 더 심할 것입니다. 때문에 크롬에서 주의하라고 알려주는 내용입니다.\n\n- [https://github.com/navermaps/maps.js/issues/298](https://github.com/navermaps/maps.js/issues/298) 에는 네이버에서 답변한 내용이 있는데 해결에 도움이 되지 않습니다.\n\n- [https://devtalk.kakao.com/t/topic/53763](https://devtalk.kakao.com/t/topic/53763) 에 있는 카카오의 답변에 따르면 지도가 뜬다면 그닥 큰 문제는 아니니 무시해도 괜찮다고 합니다. 카카오가 직접 무시해도 된다고 하니 좀 안심(?)이 되긴 하네요. 아무튼 이 warning도 무시하고 넘어갑니다.\n\n  ![BUILDIT-error4](/assets/img/BUILDIT-error4.png)\n\n## 결과\n\n![BUILDIT-error5](/assets/img/BUILDIT-error5.png)\n\n콘솔창이 완전히 깨끗해지지는 않았지만 그래도 한 페이지 내로 줄어들었습니다.\n\n이제 스스로 해결할 수는 없거나 무시해도 되는 메시지들과 내부 API 오류만 남았네요. 모든 페이지를 브루트포스하게 탐색하지는 않았기 때문에 다른 라우트들을 돌아다니며 확인해보고 처음 보는 오류메시지이면 추가하도록 하겠습니다🙏\n\n\n\n\n\n");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,