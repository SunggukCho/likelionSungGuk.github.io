self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contents/blog/vuejs/2021-03-12-Vuex를 알아보자.md":
/*!******************************************************!*\
  !*** ./contents/blog/vuejs/2021-03-12-Vuex를 알아보자.md ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("---\r\ntitle: \"Vuex가 무엇이고 왜 쓰는것인가?\"\r\ndate: \"2021.03.12\"\r\ntags: \r\n  - vue\r\n  - vuex\r\n---\r\n\r\n## 1. 뷰엑스는 왜 필요한가?\r\n\r\n1. Vue인스턴스\r\n\r\n![vue인스턴스](/assets/img/vue인스턴스.png)\r\n\r\n화면(View) -> 화면에서의 이벤트 발생(Actions) -> 데이터 변경(State)의 **단방향 데이터 흐름**이 특징입니다.\r\n\r\n하지만, Component 관계가 복잡해질수록 상태관리가 어렵다\r\n\r\n![상태관리](/assets/img/vuestate.png)\r\n\r\n```jsx\r\n// 참고) Props를 정의할 때 Vue스타일 가이드에서 추천하는 스타일... \r\n// 여러번 반복되면 코드가 상당히 복잡해질듯\r\nprops: {\r\n  status: {\r\n    type: String,\r\n    required: true,\r\n    validator: function (value) {\r\n      return [\r\n        'syncing',\r\n        'synced',\r\n        'version-conflict',\r\n        'error'\r\n      ].indexOf(value) !== -1\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. 글로벌 이벤트 버스\r\n\r\n이런 상태관리의 어려움을 해결하기 위해 소규모 Vue 프로젝트에서는 `이벤트 버스`를 사용한다.\r\n\r\n![vue인스턴스](/assets/img/eventbus.png)\r\n\r\n하지만 글로벌 이벤트 버스에도 한계가 있다.\r\n\r\n![vue인스턴스](/assets/img/buslimit.png)\r\n\r\n## 2. Vuex란?\r\n\r\n> Application을 구성하는 모든 컴포넌트가 참조가능한 상태를 중앙에서 관리하는 저장소\r\n> Vue.js가 효율적인 업데이트를 위해 세분화된 반응 시스템을 활용하도록 특별히 고안된 Vuex는 뷰의 상태관리 패턴이자 라이브러리이다. \r\n> 주로 중대형 프로젝트에 적합하다.\r\n\r\nVuex는 이 문제를 어떻게 해결하는가? → 전역 상태 관리 매니저 (Store)에 각각의 Component들이 접근하는 방식\r\n\r\n![vue인스턴스](/assets/img/storeconcept.png)\r\n\r\n![vue인스턴스](/assets/img/vuestructure.png)\r\n\r\n아래에서 각각의 주요 오소들을 자세히 살펴봅시다.\r\n\r\n## 3. 주요 요소\r\n\r\n### A. State\r\n\r\n> 여러 컴포넌트 간에 공유되는 데이터를 의미합니다\r\n\r\n1. state선언\r\n\r\n```javascript\r\nnew Vuex.Store({\r\n  state: {\r\n    message: 'Hello Vue.js'\r\n  }\r\n})\r\n```\r\n\r\n- message의 상태값 정의\r\n\r\n접근법은?\r\n\r\n```javascript\r\n<div>{{ this.$store.state.message }}</div>\r\n```\r\n\r\n2. state 호출\r\n\r\n```javascript\r\ndata: function () {\r\n\treturn {\r\n        sharedState = this.$store.state.message;\r\n\t}\r\n}\r\n```\r\n\r\n이렇게 중앙에 있는 store의 state 중 message에 접근해서 해당 데이터를 호출할 수 있다.\r\n\r\n하지만, 이 방식으로 호출하는 것은 비추천!\r\n\r\n### B. Getters\r\n\r\n> 상태(state) 값이 변경되었을 때 변화에 따른 차이를 자동으로 반영하여 값을 계산해줍니다.\r\n> **Computed 속성과 매칭**\r\n\r\n```javascript\r\nnew Vuex.Store({\r\n  state: {\r\n    message: 'Hello Vue.js'\r\n  },\r\n  getters: {\r\n    reverseMessage(state) {\r\n      return state.message.split('').reverse().join('');\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n위에서 `State`를 설명할 때 호출하는 방식을 이야기 했는데, Vue에서 추천하는 방식은 이 `Getters` 를 활용해서'만' 호출할 것을 강하게 추천한다.\r\n\r\n### C. Mutations\r\n\r\n> 뷰엑스에서 **상태 값을 변경하는 유일한 방법**입니다. 상태는 항상 뮤테이션으로 변경됩니다\r\n> **Method속성과 매칭**\r\n\r\n1. Mutation 선언\r\n\r\n```javascript\r\nnew Vuex.Store({\r\n  state: {\r\n    message: 'Hello Vue.js'\r\n  },\r\n  mutations: {\r\n    reverseMessage(state) {\r\n      state.message = state.message.split('').reverse().join('');\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n2. Mutation 호출\r\n\r\n```javascript\r\nnew Vue({\r\n  methods: {\r\n    reverseMsg() {\r\n      this.$store.commit('reverseMessage');\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### D. Actions\r\n\r\n> 뮤테이션 중에서 **비동기 처리 로직들을 정의**하는 속성\r\n> 동기 처리는 뮤테이션, 비동기 처리는 액션\r\n\r\n1. actions 선언\r\n\r\n```javascript\r\nnew Vuex.Store({\r\n  state: {\r\n    message: ''\r\n  },\r\n  mutations: {\r\n    reverseMessage(state, data) {\r\n      state.message = data.split('').reverse().join('');\r\n    }\r\n  },\r\n  actions: {\r\n    fetchMessage(context) {\r\n      axios.get(url).then(function(response) {\r\n        context.commit('reverseMessage', response.message);\r\n      });\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n2. actions 호출\r\n\r\n```javascript\r\nnew Vue({\r\n  methods: {\r\n    getMessage() {\r\n      this.$store.dispatch('fetchMessage');\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n---\r\n\r\n### 요약\r\n\r\n- Vue.js에서 중앙 Store에 저장된 State를 호출할 때는 `this.$store.state.message` 와 같이 호출하는 것이 아니라 `this.$store.getters.` 에서 `return` 해주는 값을 가져다가 써야 한다.\r\n- State 값을 변경하기 위해서는 컴포넌트에서 커밋으로 `Mutation` or `Action`을 호출해서 변경해준다.\r\n\r\n---\r\n\r\n## 4. 헬퍼 함수\r\n\r\n> 헬퍼 함수는 뷰엑스 기술 요소들을 **컴포넌트에서 더 편하게 쓸 수 있도록 도와주는 API**\r\n\r\n### A. 일반적인 접근 방법\r\n\r\n```javascript\r\n<div>{{ this.$store.getters.reverseMessage }}</div>\r\n```\r\n\r\n```javascript\r\nexport default {\r\n  computed: {\r\n    reverseMessage() {\r\n      return this.$store.getters.reverseMessage;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### B. 헬퍼 함수 사용\r\n\r\n```javascript\r\n<div>{{ reverseMessage }}</div>\r\n```\r\n\r\n```javascript\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  computed: {\r\n    ...mapGetters(['reverseMessage'])\r\n  }\r\n}\r\n```\r\n\r\n- `this.$store. ~~~` 와 같이 복잡한 방식X → 가독성 좋아짐\r\n\r\n```javascript\r\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\r\n등 mapGetters뿐만 아니라 mapState, mapMutations, mapActions 모두 사용 가능!\r\n```\r\n\r\n## 5. 추가 학습 필요 사항\r\n\r\n### 스토어 모듈화\r\n\r\n> 애플리케이션에 스토어를 적용해서 사용하다가 보면 금방 스토어의 덩어리가 커진다. 그럴때 데이터(상태)의 성격별로 스토어를 모듈화 해주면 관리하기 수월하다.\r\n\r\n[Modules - Cracking Vue.js](https://joshua1988.github.io/vue-camp/vuex/modules.html#%EC%8A%A4%ED%86%A0%EC%96%B4-%EB%AA%A8%EB%93%88%ED%99%94-%EC%BD%94%EB%93%9C-%ED%98%95%EC%8B%9D)\r\n\r\n### ES6 - 스프레드 오퍼레이터\r\n\r\n[[ES6] Spread Operator (스프레드 연산자)](https://paperblock.tistory.com/62)\r\n\r\n---\r\n\r\nReferences\r\n\r\n[State - Cracking Vue.js](https://joshua1988.github.io/vue-camp/vuex/state.html)");

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,